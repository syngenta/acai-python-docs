{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#acai-aws","title":"Acai AWS","text":"<p>DRY, configurable, declarative node library for working with Amazon Web Service Lambdas.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Highly configurable apigateway internal router</li> <li>Openapi schema adherence for all event types</li> <li>Extensible and customizable middleware for validation and other tasks</li> <li>DRY coding interfaces without the need of boilerplate</li> <li>Ease-of-use with the serverless framework</li> <li>Local Development support</li> <li>Happy Path Programming (See Philosophy below)</li> </ul>"},{"location":"#philosophy","title":"Philosophy","text":"<p>The Acai philosophy is to provide a dry, configurable, declarative library for use with the amazon lambdas, which encourages Happy Path Programming (HPP).</p> <p>Happy Path Programming is an idea in which inputs are all validated before operated on. This ensures code follows the happy path without the need for mid-level, nested exceptions and all the nasty exception handling that comes with that. The library uses layers of customizable middleware options to allow a developer to easily dictate what constitutes a valid input, without nested conditionals, try/catch blocks or other coding blocks which distract from the happy path that covers the majority of that codes intended operation.</p>"},{"location":"changes/","title":"2.0 Breaking Changes","text":""},{"location":"changes/#changes-to-the-acai-aws-from-1x-to-20","title":"Changes to the Acai AWS from 1.x to 2.0","text":"<p>In version 2.0 we have added a lot of cool new features, but that does require deprecating some old things. Below is a list of all the changes:</p> Tip <p>If you don't want to make the changes yourself manually, we have a script which will make the changes for you. Just run this command in your terminal from the root of the directory of the project you want to upgrade: </p><pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/syngenta/acai-python-docs/main/scripts/python-upgrade.sh)\"\n</code></pre>"},{"location":"changes/#apigateway","title":"APIGateway","text":"old new description <code>router.route()</code> <code>router.route(event)</code> <code>router.route</code> now requires the event to be passed in <code>required_params</code> <code>required_query</code> <code>required_query</code> is how you define required query string params <code>request.params</code> <code>request.query_params</code> <code>request.query_params</code> is how you access query string params"},{"location":"changes/#dynamodb-record","title":"DynamoDB Record","text":"old new <code>record.event_id</code> <code>record.id</code> <code>record.event_name</code> <code>record.name</code> <code>record.event_source</code> <code>record.source</code> <code>record.event_source_arn</code> <code>record.source_arn</code>"},{"location":"changes/#s3-record","title":"S3 Record","text":"old new <code>record.event_id</code> <code>record.id</code> <code>record.event_name</code> <code>record.name</code> <code>record.event_source</code> <code>record.source</code> <code>record.event_source_arn</code> <code>record.source_arn</code> <code>record.requestParameters</code> <code>record.request</code> <code>record.responseElements</code> <code>record.response</code> <code>record.s3SchemaVersion</code> <code>record.version</code>"},{"location":"changes/#snssqs-record","title":"SNS/SQS Record","text":"old new <code>record.event_name</code> <code>record.name</code> <code>record.event_source</code> <code>record.source</code> <code>record.event_source_arn</code> <code>record.source_arn</code>"},{"location":"install/","title":"Install","text":""},{"location":"install/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8 or higher; download and install Python</li> <li>Access to public python registry</li> </ul>"},{"location":"install/#installation","title":"Installation","text":"Shell <pre><code>$ pip install acai_aws\n# pipenv install acai_aws\n# poetry add acai_aws\n</code></pre>"},{"location":"apigateway/configuration-details/","title":"Configuration Details","text":""},{"location":"apigateway/configuration-details/#apigateway-configuration-details","title":"Apigateway Configuration Details","text":"<p>If you are looking for a more customized application, you can review the full litany of configuration options below. This will give you the greatest control on how you python application will run.</p> <p>The router is the core of the apigateway event handler and will automatically route based on the way your project is  configured. Most of the time, there is no need to manage lists of routes matched to files or exports; all that is required is that you create a file in the location or pattern configured to hold your endpoints and the router will automatically find it.</p> Examples <p>Don't like reading documentation? Then look at  our examples, which can run locally!  </p>"},{"location":"apigateway/configuration-details/#lambda-configuration","title":"Lambda Configuration","text":"Serverless Framework <pre><code>functions:\napigateway-handler:\nhandler: api/handler/router.route\nevents:\n- http:\npath: /\nmethod: ANY\n- http:\npath: /{proxy+}\nmethod: ANY    </code></pre>"},{"location":"apigateway/configuration-details/#router-configuration-options","title":"Router Configuration Options","text":"<p>There are three ways to organize your routes: <code>directory</code>, <code>pattern</code> and <code>mapping</code>; <code>directory</code> and <code>pattern</code> routing  mode requires your project files to be placed in a particular way; <code>mapping</code> does not require any structure, as you  define every route, and it's a corresponding file. Below are the three ways configure your router:</p>"},{"location":"apigateway/configuration-details/#routing-mode-directory","title":"Routing Mode: Directory","text":"Tip <p>If you are using route params, you will need use dynamic file names which follow this pattern: </p> <p><code>_some_variable_name.py</code>.</p> file structurerouter.py <pre><code>~~ Directory ~~                     ~~ Route ~~\n===================================================================\n\ud83d\udce6api/                              |          \n\u2502---\ud83d\udcc2handler                       |           \n    \u2502---\ud83d\udcdcrouter.py                 |\n    \u2502---\ud83d\udcdcorg.py                    | /org    \n    \u2502---\ud83d\udcc2grower                    |\n        \u2502---\ud83d\udcdc__init__.py           | /grower\n        \u2502---\ud83d\udcdc_grower_id.py         | /grower/{grower_id}\n    \u2502---\ud83d\udcc2farm                      |\n        \u2502---\ud83d\udcdc__init__.py           | /farm\n        \u2502---\ud83d\udcc2_farm_id              |\n            \u2502---\ud83d\udcdc__init__.py       | /farm/{farm_id}\n            \u2502---\ud83d\udcc2field             |\n                \u2502---\ud83d\udcdc__init__.py   | /farm/{farm_id}/field\n                \u2502---\ud83d\udcdc_field_id.py  | /farm/{farm_id}/field/{field_id}\n</code></pre> <pre><code>from acai_aws.apigateway.router import Router\n\nrouter = Router(\n    base_path='your-service/v1',\n    handlers='api/handlers',\n    schema='api/openapi.yml'\n)\nrouter.auto_load()\n\ndef handle(event, context):\n    return router.route(event, context)\n</code></pre>"},{"location":"apigateway/configuration-details/#routing-mode-pattern","title":"Routing Mode: Pattern","text":"Tip <p>You can use any glob pattern you like; common patterns are:</p> <ul> <li> <p><code>/**/*_handler.py</code></p> </li> <li> <p><code>/**/handler_*.py</code></p> </li> <li> <p><code>/**/handler.py</code></p> </li> </ul> file structurerouter.py <pre><code>~~ Pattern ~~                               ~~ Route ~~\n================================================================================\n\ud83d\udce6api/                                      |\n\u2502---\ud83d\udcdcrouter.py                             |\n\u2502---\ud83d\udcc2org                                   |\n    \u2502---\ud83d\udcdcorg_handler.py                    | /org\n    \u2502---\ud83d\udcdcorg_model.py                      |\n    \u2502---\ud83d\udcdcorg_factory.py                    |\n    \u2502---\ud83d\udcdcorg_logic.py                      |\n\u2502---\ud83d\udcc2grower                                |\n    \u2502---\ud83d\udcdcgrower_handler.py                 | /grower\n    \u2502---\ud83d\udcdc_grower_id_handler.py             | /grower/{grower_id}\n    \u2502---\ud83d\udcdcgrower_model.py                   |\n    \u2502---\ud83d\udcdcgrower_factory.py                 |\n    \u2502---\ud83d\udcdcgrower_logic.py                   |\n\u2502---\ud83d\udcc2farm                                  |\n    \u2502---\ud83d\udcdcfarm_handler.py                   | /farm\n    \u2502---\ud83d\udcdcfarm_logic.py                     |\n    \u2502---\ud83d\udcdcfarm_model.py                     |\n    \u2502---\ud83d\udcc2_farm_id                          |\n        \u2502---\ud83d\udcdc_farm_id_handler.py           | /farm/{farm_id}\n        \u2502---\ud83d\udcc2field                         |\n            \u2502---\ud83d\udcdcfield_handler.py          | /farm/{farm_id}/field\n            \u2502---\ud83d\udcdc_field_id_controller.py   | /farm/{farm_id}/field/{field_id}\n            \u2502---\ud83d\udcdcfield_logic.py            |\n            \u2502---\ud83d\udcdcfield_model.py            |\n</code></pre> <pre><code>from acai_aws.apigateway.router import Router\n\nrouter = Router(\n    base_path='your-service/v1',\n    handlers='api/*_handler.py',\n    schema='api/openapi.yml'\n)\nrouter.auto_load()\n\ndef handle(event, context):\n    return router.route(event, context)\n</code></pre>"},{"location":"apigateway/configuration-details/#routing-mode-mapping","title":"Routing Mode: Mapping","text":"Tip <p>It may be more maintainable to store your routes list in a separate file, this example does not have that for brevity</p> Warning <p>Even though you are matching your files to your routes, the handler files must have functions that match HTTP method (see endpoint examples here)</p> Danger <p>This is not the preferred routing mode to use; this can lead to a sloppy, unpredictable project architecture which will be hard to maintain and extend. This is NOT RECOMMENDED.</p> file structurerouter.py <pre><code>File structure doesn't matter\n======================================================\n\ud83d\udce6api/\n\u2502---\ud83d\udcdcrouter.py\n</code></pre> <pre><code>from acai_aws.apigateway.router import Router\n\nrouter = Router(\n    base_path='your-service/v1',\n    schema='api/openapi.yml'\n    handlers={\n        'grower': 'api/routes/grower.py',\n        'farm': 'api/routes/farm.py',\n        'farm/{farm_id}/field/{field_id}': 'api/routes/farm_field.py'\n    }\n)\nrouter.auto_load()\n\ndef handle(event, context):\n    return router.route(event, context)\n</code></pre>"},{"location":"apigateway/configuration-details/#full-router-configuration-options","title":"Full Router Configuration Options","text":"option type required description <code>after_all</code> func no will call this function after EVERY request to the API <code>auto_validate</code> bool no; requires <code>schema</code> will automatically validate request against openapi.yml <code>base_path</code> str yes the base path of the API Gateway instance this is running on <code>before_all</code> func no will call this function before EVERY request to the API <code>cache_mode</code> str no; 'all','static-only','dynamic-only' will cache route endpoint module (not response) based on option, all (default), static endpoints or dynamic endpoints (route with path variables) <code>cache_size</code> int no; (default 128) how many endpoint modules to cache <code>handlers</code> str yes file path pointing to the directory where the endpoints are <code>on_error</code> func no will call this function on every unhandled error; not including validation errors <code>schema</code> str yes, if <code>after_all</code> file path pointing to the location of the openapi.yml file <code>with_auth</code> func no will call this function when <code>requirements</code> decorator have <code>auth_required</code> set to <code>True</code> <code>validate_response</code> bool no will validate response of an endpoint, can effect performance, not recommended for production <code>verbose_logging</code> bool no will log every setup, every request and every response"},{"location":"apigateway/configuration-details/#endpoint-configuration-options","title":"Endpoint Configuration Options","text":"<p>Each endpoint is meant to be treated as a separate module within the API. These endpoints are not meant to be extended  or commingled and thus should approach individually. If resources are meant to be shared across endpoints, then  those resources should be packaged as shared classes or utilities.</p> <p>Every endpoint file should contain a function which matches an  HTTP method in lower case.  Most common are <code>post</code>, <code>get</code>, <code>put</code>, <code>patch</code>, <code>delete</code>, but this library does support custom methods,  if you so choose. As long as the method of the request matches the function name, it will work.</p> <p>Each method within the endpoint file can have individual validation requirements. These requirements allow you to test  all structural points of the request, with the ability to use JSONSchema and custom middleware to further extend the  validation options.</p> Info <p>See the full configuration list, explanation and example of each setting in our  Configurations Section.</p> Tip <p>If you are already using an <code>openapi.yml</code>, none of these requirements below are necessary. Ensure your <code>router</code> has  enabled <code>auto_validate</code>  with proper <code>schema</code> configured and the below requirements are not necessary for any basic structural validation  (headers, body, query, params will be checked via openapi.yml). You can still use <code>before</code>, <code>after</code> &amp; <code>data_class</code> with  other custom validations for more advanced use cases.</p> <pre><code># example for endpoint file: api/grower.py\nfrom acai_aws.apigateway.requirements import requirements\n\nfrom api.logic.grower import Grower\nfrom api.logic.middlware import log_grower, filter_grower\n\n\n# example after function\n# def filter_grower(request, response, requirements):\n#     if 'GET' in response.raw['message']:\n#       print(response.raw)\n\n@requirements(\n    required_query=['requester_id'],\n    available_query=['grower_id', 'grower_email'],\n    data_class=Grower,\n    after=filter_grower,\n    auth_required=True\n)\ndef get(request, response):\n    response.body = {'message': 'GET called', 'request_query_params': request.query_params}\n    return response\n\n\n# example before function\n# def log_grower(request, response, requirements):\n#     print(request.body['grower_id'])\n\n@requirements(\n    required_body='v1-grower-post-request',\n    before=log_grower,\n    auth_required=True\n)\ndef post(request, response):\n    response.body = {'message': 'POST called', 'request_body': request.body}\n    return response\n\n\n@requirements(\n    required_headers=['x-api-key', 'x-correlation-id']\n    required_route='grower/{grower_id}'\n    auth_required=True\n    required_body={\n        'type': 'object',\n        'required': ['grower_id'],\n        'additionalProperties': False,\n        'properties': {\n            'grower_id': {\n                'type': 'string'\n            },\n            'body': {\n                'type': 'object'\n            },\n            'dict': {\n                'type': 'boolean'\n            }\n        }\n    }\n)\ndef patch(request, response):\n    response.body = {'message': 'PATCH called', 'request_body': request.body}\n    return response\n\n# requirements is not required\ndef delete(request, response):\n    response.body = {'message': 'DELETE called'}\n    return response\n</code></pre>"},{"location":"apigateway/configuration-details/#full-requirements-configuration-options","title":"Full Requirements Configuration Options","text":"requirement type description <code>required_headers</code> array every header in this array must be in the headers of request <code>available_headers</code> array only headers in this array will be allowed in the request <code>required_query</code> array every item in the array is a required query string parameter <code>available_query</code> array only items in this array are allowed in the request <code>required_route</code> str when using parameters, this is the required parameters <code>required_body</code> str references a JSschema component in your <code>schema</code> <code>required_auth</code> bool will trigger <code>with_auth</code> function defined in the router config <code>before</code> func a custom function to be ran before your method function <code>after</code> func a custom function to be ran after your method function <code>data_class</code> class a custom class that will be passed instead of the request obj [<code>custom-requirement</code>] any see bottom of page"},{"location":"apigateway/configuration-details/#required_headers","title":"<code>required_headers</code>","text":"Info <p>Headers are case-sensitive, make sure your casing matches your expectations.</p> <pre><code>@requirements(\n    required_headers=['x-api-key']\n)\ndef post(request, response):\n    pass\n</code></pre>"},{"location":"apigateway/configuration-details/#available_headers","title":"<code>available_headers</code>","text":"Warning <p>This is not recommended for frequent use as it raises errors for every header which does not conform to the array </p> <p>provided. Many browsers, http tools, and libraries will automatically add headers to request, unbeknownst to the user.  By using this setting, you will force every user of the endpoint to take extra care with the headers provided and  may result in poor API consumer experience.</p> <pre><code>@requirements(\n    available_headers=['x-api-key', 'x-on-behalf-of']\n)\ndef post(request, response):\n    pass\n</code></pre>"},{"location":"apigateway/configuration-details/#required_query","title":"<code>required_query</code>","text":"<pre><code>@requirements(\n    required_query=['grower_id']\n)\ndef get(request, response):\n    pass\n</code></pre>"},{"location":"apigateway/configuration-details/#available_query","title":"<code>available_query</code>","text":"Info <p><code>available_query</code> entries do NOT need to include entries already defined in the <code>required_query</code>; what is required,</p> <p>is assumed to be available.</p> <pre><code>@requirements(\n    available_query=['grower_email']\n)\ndef get(request, response):\n    pass\n</code></pre>"},{"location":"apigateway/configuration-details/#required_route","title":"<code>required_route</code>","text":"Warning <p>This is required if you are using dynamic routing (ex. <code>_id.py</code>) with path parameters. </p> <p>The router will provide a path values in <code>request.path_params</code></p> <pre><code>@requirements(\n    required_route='grower/{id}'\n)\ndef get(request, response):\n    pass\n</code></pre>"},{"location":"apigateway/configuration-details/#required_body","title":"<code>required_body</code>","text":"Info <p>This is referencing a <code>components.schemas</code> section of your openapi.yml file defined in the <code>schema</code> value in your </p> <p>router config, but you can also pass in a <code>json schema</code> in the form of a <code>dict</code>.</p> <pre><code>@requirements(\n    required_body='v1-grower-post-request'\n)\ndef post(request, response):\n    pass\n\n\n@requirements(\n    required_body={\n        'type': 'object',\n        'required': ['grower_id'],\n        'additionalProperties': False,\n        'properties': {\n            'grower_id': {\n                'type': 'string'\n            },\n            'body': {\n                'type': 'object'\n            },\n            'dict': {\n                'type': 'boolean'\n            }\n        }\n    }\n)\ndef patch(request, response):\n    pass\n</code></pre>"},{"location":"apigateway/configuration-details/#auth_required","title":"<code>auth_required</code>","text":"Info <p>This will trigger the function you provided in the router config under the <code>with_auth</code> configuration</p> <pre><code>@requirements(\n    auth_required=True\n)\ndef delete(request, response):\n    pass\n</code></pre>"},{"location":"apigateway/configuration-details/#before","title":"<code>before</code>","text":"<pre><code>def before_func(request, response, requirements):\n    print(request)\n    print(response)\n    print(requirements)\n\n\n@requirements(\n    before=before_func\n)\ndef post(request, response):\n    pass\n</code></pre>"},{"location":"apigateway/configuration-details/#after","title":"<code>after</code>","text":"<pre><code>def after_func(request, response, requirements):\n    print(request)\n    print(response)\n    print(requirements)\n\n\n@requirements(\n    before=after_func\n)\ndef post(request, response):\n    pass\n</code></pre>"},{"location":"apigateway/configuration-details/#data_class","title":"<code>data_class</code>","text":"Info <p>Instead of getting a <code>request</code> and <code>response</code> as arguments passed to your API function, you will get an instance </p> <p>of the class you provided here</p> <pre><code>class Grower:\n    def __init__(self, request):\n        for k, v in request.body.items():\n            setattr(self, k, v)\n\n@requirements(\n    data_class=Grower\n)\ndef post(grower, response):\n    pass\n</code></pre>"},{"location":"apigateway/configuration-details/#custom-requirements","title":"custom requirements","text":"Info <p>You can add as many custom requirements as you want, with any variable type you want, and they will be passed to </p> <p>your <code>before_all</code>, <code>before</code>, <code>after_all</code>, <code>after</code> and <code>with_auth</code> middleware defined functions.</p> <pre><code>@requirements(\n    your_custom_requirement={'whatever': ('you', 'want')}\n)\ndef put(request, response):\n    pass\n</code></pre>"},{"location":"apigateway/configuration-details/#request-object","title":"Request Object","text":"<p>By default, every endpoint function will receive an instance of the <code>Request</code> class (aka <code>request</code>) as the first  argument of their function. This <code>request</code> has a lot of properties which will do common things automatically, but  still allows the developer to override those operations if they deem necessary. Below is a list and examples of all  the properties of the <code>request</code>:</p>"},{"location":"apigateway/configuration-details/#request-properties","title":"Request Properties","text":"property type mutable description <code>method</code> str no the http method of the request <code>cookies</code> list no the cookies of the request <code>protocol</code> str no the protocol of the request <code>content_type</code> str no the content_type of the request body <code>host_url</code> str no the host_url of the request was sent to <code>domain</code> str no the domain of the request was sent to <code>stage</code> str no the stage the lambda was deployed to <code>resource</code> str no the AWS resource being invoked <code>authorizer</code> object no if using a customized authorizer, the authorizer object <code>headers</code> object no the headers of the request <code>params</code> object no combination of query string and path params in one object <code>query_params</code> object no query string parameters from the request <code>path_params</code> object no the path parameters of the request <code>route</code> str no the requested route with placeholders of params <code>path</code> str no the raw requested path with actual param values <code>json</code> object no the body of the request, converted from json string in object <code>xml</code> object no the body of the request, converted from xml string in object <code>graphql</code> str no the body of the graphql request as a string <code>body</code> any no the body of the request, converted to based on data type <code>raw</code> any no the raw body of the request no conversion <code>context</code> object yes mutable request context to assigned and pass around <code>event</code> object no the full event originally coming from the lambda"},{"location":"apigateway/configuration-details/#requestcookies","title":"<code>request.cookies</code>","text":"<pre><code>print(request.cookies)\n\n# output: \n['some-cookie']\n</code></pre>"},{"location":"apigateway/configuration-details/#requestprotocol","title":"<code>request.protocol</code>","text":"<pre><code>print(request.protocol)\n\n# output: \n'https'\n</code></pre>"},{"location":"apigateway/configuration-details/#requestcontent_type","title":"<code>request.content_type</code>","text":"<pre><code>print(request.content_type)\n\n# output: \n'application/json'\n</code></pre>"},{"location":"apigateway/configuration-details/#requesthost_url","title":"<code>request.host_url</code>","text":"<pre><code>print(request.host_url)\n\n# output: \n'https://api.are-great.com'\n</code></pre>"},{"location":"apigateway/configuration-details/#requestdomain","title":"<code>request.domain</code>","text":"<pre><code>print(request.domain)\n\n# output: \n'api.are-great.com'\n</code></pre>"},{"location":"apigateway/configuration-details/#requeststage","title":"<code>request.stage</code>","text":"<pre><code>print(request.stage)\n\n# output: \n'prod'\n</code></pre>"},{"location":"apigateway/configuration-details/#requestmethod","title":"<code>request.method</code>","text":"<pre><code>print(request.method)\n\n# output: \n'get'\n</code></pre>"},{"location":"apigateway/configuration-details/#requestresource","title":"<code>request.resource</code>","text":"<pre><code>print(request.resource)\n\n# output: \n'/{proxy+}'\n</code></pre>"},{"location":"apigateway/configuration-details/#requestauthorizer","title":"<code>request.authorizer</code>","text":"Tip <p>This is only useful if you are using an external authorizer with your lambda.</p> <pre><code>print(request.authorizer)\n\n# output:\n{\n    'apiKey': 'SOME KEY',\n    'userId': 'x-1-3-4',\n    'correlationId': 'abc12312',\n    'principalId': '9de3f415a97e410386dbef146e88744e',\n    'integrationLatency': 572\n}\n</code></pre>"},{"location":"apigateway/configuration-details/#requestheaders","title":"<code>request.headers</code>","text":"<pre><code>print(request.headers)\n\n# output:\n{\n    'x-api-key': 'SOME-KEY',\n    'content-type': 'application/json'\n}\n</code></pre>"},{"location":"apigateway/configuration-details/#requestparams","title":"<code>request.params</code>","text":"Info <p>This combines both path parameters and query string parameters, nested in one object.</p> <pre><code>print(request.params)\n\n# output:\n{\n    'query': {\n        'name': 'me'\n    },\n    'path': {\n        'id': 1\n    }\n}\n</code></pre>"},{"location":"apigateway/configuration-details/#requestquery_params","title":"<code>request.query_params</code>","text":"<pre><code>print(request.query_params)\n\n# output:\n{\n     'name': 'me'\n}\n</code></pre>"},{"location":"apigateway/configuration-details/#requestpath_params","title":"<code>request.path_params</code>","text":"<pre><code>print(request.path_params)\n\n# output:\n{\n     'id': 1\n}\n</code></pre>"},{"location":"apigateway/configuration-details/#requestroute","title":"<code>request.route</code>","text":"Info <p>This will provide the route with the path param variables included</p> <pre><code>print(request.route)\n\n# output:\n'grower/{id}'\n</code></pre>"},{"location":"apigateway/configuration-details/#requestpath","title":"<code>request.path</code>","text":"Info <p>This will provide the route with the path param values replacing the variables</p> <pre><code>print(request.path)\n\n# example output: \n'grower/1'\n</code></pre>"},{"location":"apigateway/configuration-details/#requestjson","title":"<code>request.json</code>","text":"Warning <p>This will raise an unhandled exception if the body is not json compatible</p> <pre><code>print(request.json);\n\n# output:\n{\n    'some_json_key': 'some_json_value'\n}\n</code></pre> <pre><code>print(request.form);\n\n# output:\n{\n    'some_form_key': 'some_form_value'\n}\n</code></pre>"},{"location":"apigateway/configuration-details/#requestxml","title":"<code>request.xml</code>","text":"Warning <p>This will raise an unhandled exception if the body is not xml compatible</p> <pre><code>python(request.xml);\n\n# output:\n{\n    'some_xml_key': 'some_xml_value'\n}\n</code></pre>"},{"location":"apigateway/configuration-details/#requestgraphql","title":"<code>request.graphql</code>","text":"Info <p>This is graphql string since there is no object equivalent; you can pass this directly to your graphql resolver</p> <pre><code>python(request.graphql);\n\n# output:\n'{\n    players {\n        name\n    }\n}'\n</code></pre>"},{"location":"apigateway/configuration-details/#requestbody","title":"<code>request.body</code>","text":"Tip <p>This is the safest way to get the body of the request. It will use the <code>content-type</code> header to determine the data sent and convert it; if the data can't be converted for whatever reason it will catch the error and return the raw body provided unconverted.</p> <pre><code>print(request.body)\n\n# output:\n{\n    'some_key': 'some_value'\n}\n</code></pre>"},{"location":"apigateway/configuration-details/#requestraw","title":"<code>request.raw</code>","text":"<pre><code>print(request.raw)\n\n# output: \n# whatever the raw data of the body is; string, json string, xml, binary, etc\n</code></pre>"},{"location":"apigateway/configuration-details/#requestcontext","title":"<code>request.context</code>","text":"Tip <p>This is the only mutable property of the request, to be used by any of the <code>before</code> or <code>before_all</code> middleware options</p> <pre><code>request.context = {'application_assignable': true}\nprint(request.context)\n\n# output:\n{\n    'application_assignable': true\n}\n</code></pre>"},{"location":"apigateway/configuration-details/#requestevent","title":"<code>request.event</code>","text":"Warning <p>This is the original full request. Not advisable to use this as defeats the purpose of the entire Acai . In addition, you don't want to mutate this object and potentially mess up the entire router.</p> <pre><code>print(request.event)\n\n# output:\n{\n    \"version\": \"2.0\",\n    \"routeKey\": \"$default\",\n    \"rawPath\": \"/my/path\",\n    \"rawQueryString\": \"parameter1=value1&amp;parameter1=value2&amp;parameter2=value\",\n    \"cookies\": [\n        \"cookie1\",\n        \"cookie2\"\n    ],\n    \"headers\": {\n        \"header1\": \"value1\",\n        \"header2\": \"value1,value2\"\n    },\n    \"queryStringParameters\": {\n        \"parameter1\": \"value1,value2\",\n        \"parameter2\": \"value\"\n    },\n    \"requestContext\": {\n        \"accountId\": \"123456789012\",\n        \"apiId\": \"api-id\",\n        \"authentication\": {\n            \"clientCert\": {\n                \"clientCertPem\": \"CERT_CONTENT\",\n                \"subjectDN\": \"www.example.com\",\n                \"issuerDN\": \"Example issuer\",\n                \"serialNumber\": \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\",\n                \"validity\": {\n                    \"notBefore\": \"May 28 12:30:02 2019 GMT\",\n                    \"notAfter\": \"Aug  5 09:36:04 2021 GMT\"\n                }\n            }\n        },\n        \"authorizer\": {\n            \"jwt\": {\n                \"claims\": {\n                    \"claim1\": \"value1\",\n                    \"claim2\": \"value2\"\n                },\n                \"scopes\": [\n                    \"scope1\",\n                    \"scope2\"\n                ]\n            }\n        },\n        \"domainName\": \"id.execute-api.us-east-1.amazonaws.com\",\n        \"domainPrefix\": \"id\",\n        \"http\": {\n            \"method\": \"POST\",\n            \"path\": \"/my/path\",\n            \"protocol\": \"HTTP/1.1\",\n            \"sourceIp\": \"IP\",\n            \"userAgent\": \"agent\"\n        },\n        \"requestId\": \"id\",\n        \"routeKey\": \"$default\",\n        \"stage\": \"$default\",\n        \"time\": \"12/Mar/2020:19:03:58 +0000\",\n        \"timeEpoch\": 1583348638390\n    },\n    \"body\": \"Hello from Lambda\",\n    \"pathParameters\": {\n        \"parameter1\": \"value1\"\n    },\n    \"isBase64Encoded\": False,\n    \"stageVariables\": {\n        \"stageVariable1\": \"value1\",\n        \"stageVariable2\": \"value2\"\n    }\n}\n</code></pre>"},{"location":"apigateway/configuration-details/#response-object","title":"Response Object","text":"<p>By default, every endpoint function will receive an instance of the <code>Response</code> class (aka <code>response</code>) as the second argument of their function.  This response object is meant to provide consistency to HTTP response codes and error signatures. Below is a list and examples of all the properties of the <code>response</code>:</p>"},{"location":"apigateway/configuration-details/#response-properties","title":"Response Properties","text":"property type description <code>headers</code> tuple provide headers in tuple pairs to add new headers <code>code</code> int http response code to be returned the requester <code>body</code> any body of the response automatically converted to JSON string <code>raw</code> any body of the response not converted to JSON string <code>compress</code> bool will compress the body if set to true and add proper headers <code>set_error</code> func function to set an error with a key and value <code>has_error</code> boolean simple property to check if response already has errors in it"},{"location":"apigateway/configuration-details/#responseheaders","title":"<code>response.headers</code>","text":"<pre><code>response.headers = ('status', 'ok')\nresponse.headers = ('response_id', 'some-guid')\n\nprint(response.headers)\n\n# output:\n{\n    'status': 'ok',\n    'response_id': 'some-guid',\n}\n</code></pre>"},{"location":"apigateway/configuration-details/#responsecode","title":"<code>response.code</code>","text":"<pre><code>response.code = 418;\n\nprint(response.code);\n\n# output:\n418\n</code></pre>"},{"location":"apigateway/configuration-details/#responsebody","title":"<code>response.body</code>","text":"Info <p>This will automatically convert the body to json if possible when called.</p> <pre><code>response.body = {'some_key': 'some_value'}\n\nprint(response.body)\n\n# output:\n'{\"someKey\":\"someValue\"}'\n</code></pre>"},{"location":"apigateway/configuration-details/#responseraw","title":"<code>response.raw</code>","text":"Info <p>This will NOT automatically convert the body to json if possible when called. This is great when working with an <code>after_all</code> method that wants to mutate the body of the response before returning to the user.</p> <pre><code>response.raw = {'some_key': 'some_value'};\n\nprint(response.raw)\n\n# output:\n{\n    'some_key': 'some_value'\n}\n</code></pre>"},{"location":"apigateway/configuration-details/#responsecompress","title":"<code>response.compress</code>","text":"Info <p>This will compress whatever is in the body property.</p> <pre><code>response.compress = True\n\nprint(response.body)\n# output: this will gzip and compress the body.\n</code></pre>"},{"location":"apigateway/configuration-details/#responseset_errorkey-value","title":"<code>response.set_error(key, value)</code>","text":"<pre><code>some_key = 'abc123'\nresponse.set_error('someKey', f'{some_key} is not a valid key to use with this service; try again with a different key')\nanother_key = 'def456'\nresponse.set_error('anotherKey', f'{another_key} is not the correct type to operate on')\n\nprint(response.raw)\n\n# output:\n{\n    'errors': [\n        {\n            'key_path': 'someKey',\n            'message': 'abc123 is not a valid key to use with this service; try again with a different key'\n        },\n        {\n            'key_path': 'anotherKey',\n            'message': 'def456 is not the correct type to operate on'\n        }\n    ]\n}\n</code></pre>"},{"location":"apigateway/configuration-details/#responsehas_error","title":"<code>response.has_error</code>","text":"<pre><code>response.setError('user', 'your access is denied')\nprint(response.has_error)\n\n# output:\nTrue\n\n\nresponse.body = {'user': 'you have been granted access'};\nprint(response.has_error)\n\n# output:\nFalse\n</code></pre>"},{"location":"apigateway/quickstart/","title":"Quickstart","text":""},{"location":"apigateway/quickstart/#apigateway-quickstart","title":"Apigateway Quickstart","text":"<p>Event handler and router for Amazon APIGateway REST &amp; GraphQL, allowing you to take advantage of procesing all api  requests in one lambda.</p>"},{"location":"apigateway/quickstart/#features","title":"Features","text":"<ul> <li>Configurable router based on 3 common routing patterns</li> <li>Built-in request validation using standard OpenAPI schema</li> <li>Easily validate request in modular and declarative way without any additional code</li> <li>Able to easily extend with custom middleware at both app and per-endpoint levels</li> <li>Support for CORS, binary and Gzip compression</li> </ul>"},{"location":"apigateway/quickstart/#installation","title":"Installation","text":"Shell <pre><code>$ pip install acai_aws\n# pipenv install acai_aws\n# poetry add acai_aws\n</code></pre>"},{"location":"apigateway/quickstart/#minimal-setup","title":"Minimal Setup","text":"<p>After installation, create a handler file and configure the AWS lambda to use that file as its handler. For the full set of configurations, please review the full list of configurations found router setup page.</p> router.pyserverless.ymlfile structure <pre><code>from acai_aws.apigateway.router import Router\n\nrouter = Router(\n    base_path='your-service/v1',\n    handlers='api/handlers',\n    schema='api/openapi.yml'\n)\nrouter.auto_load()\n\ndef handle(event, context):\n    return router.route(event, context)\n</code></pre> <pre><code>functions:\napigateway-handler:\nhandler: api/handlers/router.handle\nevents:\n- http:\npath: /\nmethod: ANY\n- http:\npath: /{proxy+}\nmethod: ANY    </code></pre> <pre><code>~~ Directory ~~                     ~~ Route ~~\n===================================================================\n\ud83d\udce6api/                              |          \n\u2502---\ud83d\udcc2handlers                      |           \n    \u2502---\ud83d\udcdcrouter.py                 |\n    \u2502---\ud83d\udcdcorg.py                    | /org    \n    \u2502---\ud83d\udcc2grower                    |\n        \u2502---\ud83d\udcdc__init__.py           | /grower\n        \u2502---\ud83d\udcdc_grower_id.py         | /grower/{grower_id}\n    \u2502---\ud83d\udcc2farm                      |\n        \u2502---\ud83d\udcdc__init__.py           | /farm\n        \u2502---\ud83d\udcc2_farm_id              |\n            \u2502---\ud83d\udcdc__init__.py       | /farm/{farm_id}\n            \u2502---\ud83d\udcc2field             |\n                \u2502---\ud83d\udcdc__init__.py   | /farm/{farm_id}/field\n                \u2502---\ud83d\udcdc_field_id.py  | /farm/{farm_id}/field/{field_id}\n</code></pre>"},{"location":"common/logger/","title":"Logger","text":"<p>The Acai logger is automatically logs in a formatted JSON string for easy reading and searching with AWS Cloud Watch.  A developer can then use  AWS filter patterns making it  effortless to find the exact log they are looking for. Below is an example of how to use the logger:</p>"},{"location":"common/logger/#basic-usage","title":"Basic Usage","text":"<pre><code>from acai_aws.common import logger\n\nlogger.log(level='INFO', log='some log') # level=INFO|DEBUG|WARN|ERROR\n\n# exammple output\n\"\"\"\n{\n    level: '$LEVEL', \n    \"time\": \"2023-09-01T19:35:06.163634+00:00\",\n    \"stack\": [\n        \"Traceback (most recent call last):\",\n        \"File \\\"/some-directory/router.py\\\", line 36, in route\",\n        \"self.__run_route_procedure(request, response)\",\n        \"File \\\"/some-directory/router.py\\\", line 53, in __run_route_procedure\",\n        \"endpoint.run(request, response)\",\n        \"File \\\"/some-directory/endpoint.py\\\", line 32, in run\",\n        \"return self.__method(request, response)\",\n        \"File \\\"/some-directory/requirements.py\\\", line 21, in run_method\",\n        \"func(request, response)\",\n        \"File \\\"api/v1/handler/grower/_grower_id.py\\\", line 8, in get\",\n        \"grower = Grower.get_by_id(grower_id=request.path_params['grower_id_HERE'])\",\n        \"KeyError: 'grower_id_HERE'\"\n    ],\n    log: '$MESSGE'\n}\n\"\"\"\n</code></pre>"},{"location":"common/logger/#decorator-usage","title":"Decorator Usage","text":"<p>The Acai logger also comes packaged as an easy to use log decorator that can decorate any method or function and even apply log conditions so you can control when exactly something is logged.</p> <pre><code>from acai_aws.common.logger.decorator import log\n\n@log()\ndef mock_func_simple(arg1, arg2, **kwargs):\n    return {'args': [arg1, arg2], 'kwargs': kwargs}\n\n@log(level='INFO')\ndef mock_func_level(arg1, arg2, **kwargs):\n    return {'args': [arg1, arg2], 'kwargs': kwargs}\n\n@log(level='INFO', condition=some_log_condition)\ndef mock_func_condition(arg1, arg2, **kwargs):\n    return {'args': [arg1, arg2], 'kwargs': kwargs}\n\ndef some_log_condition(*args, **_):\n    if args[0] == 1:\n        return True\n    return False\n</code></pre>"},{"location":"documentdb/configuration-details/","title":"Configurations Details","text":""},{"location":"documentdb/configuration-details/#documentdb-configurations-details","title":"DocumentDB Configurations Details","text":"<p>The DocumentDB event will automatically handle many common things done when eventing off a DocumentDB stream.  Developers then have the ability to further extend that functionality with custom middleware.  Below is a full list of all the configurations available and examples of their use.</p> Examples <p>Don't like reading documentation? Then look at  our examples, which can be deployed  in 1 command into your AWS account! </p>"},{"location":"documentdb/configuration-details/#lambda-configuration","title":"Lambda Configuration","text":"serverless.yml <pre><code>functions:\ndocumentdb-handler:\nhandler: service/handlers/documentdb.handle\nmemorySize: 512\ntimeout: 30\nevents:\n- stream:\ntype: documentdb\narn:\nFn::GetAtt: [ SomeDocDBCluser, ClusterArn ]\n</code></pre>"},{"location":"documentdb/configuration-details/#requirements-configuration-options","title":"Requirements Configuration Options","text":"option type required default description <code>before</code> func no None a custom function to be ran before your records are pulled <code>after</code> func no None a custom function to be ran after your records are pulled <code>data_class</code> class no None a custom class that will be passed instead of the records object <code>operations</code> list no ['created', 'updated', 'deleted'] will only run if record was created from the listed operation <code>raise_operation_error</code> bool no False will raise exception if operation of record is not from listed operations <code>raise_body_error</code> bool no False will raise exception if body of record does not match schema provided <code>required_body</code> str or dict no None will validate body of record against this schema <code>schema</code> str no None file path pointing to the location of the openapi.yml file <pre><code>from acai_aws.documentdb.requirements import requirements\n\n# example data class\nclass SomeClass:\n    def __init__(self, record):\n        for k, v in record.body.items():\n            setattr(self, k, v)\n\n# example before function\ndef log_something(records, requirements):\n    if 'something' in requirements:\n        print(records) \n\n# example after function\ndef alert_something(records, result, requirements):\n    if 'something' in result and 'alert' in requirements:\n        print(records)\n\n@requirements(\n    before=log_something,\n    operations=['created', 'deleted', 'updated'],\n    data_class=SomeClass,\n    raise_operation_error=True,\n    raise_body_error=True,\n    schema='service/openapi.yml',\n    required_body='v1-docdb-body', # or send jsonschema dict; schema kwarg not needed if sending jsonschema dict\n    after=alert_something,\n)\ndef handle(event):\n    for record in event.records:\n        print(record)\n</code></pre>"},{"location":"documentdb/configuration-details/#documentdb-record-properties","title":"DocumentDB Record Properties","text":"property type description <code>body</code> object the new image of dynamodb record; created or updated"},{"location":"documentdb/configuration-details/#recordregion","title":"<code>record.region</code>","text":"<pre><code>print(record.region);\n\n# output\n'us-east-2'\n</code></pre>"},{"location":"documentdb/quickstart/","title":"Quickstart","text":""},{"location":"documentdb/quickstart/#documentdb-quickstart","title":"DocumentDB Quickstart","text":"<p>Event handler for Amazon DocumentDB Stream Events.</p>"},{"location":"documentdb/quickstart/#features","title":"Features","text":"<ul> <li>Automatically convert DocumentDB IDs to standard strings</li> <li>Only run on certain DocumentDB operations; i.e. when documents are created, updated or deleted</li> <li>Able to validate DocumentDB document against a JSON Schema</li> <li>Assign Data Classes to records instead of getting DocumentDB BJSON dicts</li> </ul>"},{"location":"documentdb/quickstart/#installation","title":"Installation","text":"Shell <pre><code>$ pip install acai_aws\n# pipenv install acai_aws\n# poetry add acai_aws\n</code></pre>"},{"location":"documentdb/quickstart/#minimal-setup","title":"Minimal Setup","text":"<p>After installation, create a handler file and configure the AWS lambda to use that file as its handler.</p> documentdb.pyserverless.yml <pre><code>from acai_aws.documentdb.requirements import requirements\n\n@requirements(\n    operations=['created', 'deleted']\n)\ndef handle(event):\n    for record in event.records:\n        print(record)\n</code></pre> <pre><code>functions:\ndocumentdb-handler:\nhandler: service/handlers/documentdb.handle\nmemorySize: 512\ntimeout: 30\nevents:\n- stream:\ntype: documentdb\narn:\nFn::GetAtt: [ SomeDocDBCluser, ClusterArn ]\n</code></pre>"},{"location":"dynamodb/configuration-details/","title":"Configurations Details","text":""},{"location":"dynamodb/configuration-details/#dynamodb-configurations-details","title":"DynamoDB Configurations Details","text":"<p>The Dynamodb event will automatically handle many common things done when eventing off a DynamoDB stream.  Developers then have the ability to further extend that functionality with custom middleware.  Below is a full list of all the configurations available and examples of their use.</p> Examples <p>Don't like reading documentation? Then look at  our examples, which can be deployed  in 1 command into your AWS account! </p>"},{"location":"dynamodb/configuration-details/#lambda-configuration","title":"Lambda Configuration","text":"serverless.yml <pre><code>functions:\nddb-handler:\nhandler: service/handlers/dynamodb.handle\nmemorySize: 512\ntimeout: 30\nevents:\n- stream:\ntype: dynamodb\narn:\nFn::GetAtt: [ SomeDDBTable, StreamArn ]\n</code></pre>"},{"location":"dynamodb/configuration-details/#requirements-configuration-options","title":"Requirements Configuration Options","text":"option type required default description <code>before</code> func no None a custom function to be ran before your records are pulled <code>after</code> func no None a custom function to be ran after your records are pulled <code>data_class</code> class no None a custom class that will be passed instead of the records object <code>operations</code> list no ['created', 'updated', 'deleted'] will only run if record was created from the listed operation <code>raise_operation_error</code> bool no False will raise exception if operation of record is not from listed operations <code>raise_body_error</code> bool no False will raise exception if body of record does not match schema provided <code>required_body</code> str or dict no None will validate body of record against this schema <code>schema</code> str no None file path pointing to the location of the openapi.yml file <pre><code>from acai_aws.dynamodb.requirements import requirements\n\n# example data class\nclass SomeClass:\n    def __init__(self, record):\n        for k, v in record.body.items():\n            setattr(self, k, v)\n\n# example before function\ndef log_something(records, requirements):\n    if 'something' in requirements:\n        print(records) \n\n# example after function\ndef alert_something(records, result, requirements):\n    if 'something' in result and 'alert' in requirements:\n        print(records)\n\n@requirements(\n    before=log_something,\n    operations=['created', 'deleted', 'updated'],\n    data_class=SomeClass,\n    raise_operation_error=True,\n    raise_body_error=True,\n    schema='service/openapi.yml',\n    required_body='v1-ddb-body', # or send jsonschema dict; schema kwarg not needed if sending jsonschema dict\n    after=alert_something,\n)\ndef handle(event):\n    for record in event.records:\n        print(record)\n</code></pre>"},{"location":"dynamodb/configuration-details/#dynamodb-record-properties","title":"DynamoDB Record Properties","text":"property type description <code>body</code> object the new image of dynamodb record; created or updated <code>created</code> float the approximate creationDate time <code>expired</code> bool whether the ttl has expired <code>id</code> str the id of the event which invoked the lambda <code>identity</code> object the identity who triggered the dynamodb change <code>keys</code> object the keys of DynamoDB record <code>name</code> str the name of the event which invoked the lambda <code>new_image</code> object the new image of dynamodb record; created or updated <code>old_image</code> object the old image of dynamodb record; updated or deleted <code>operation</code> str triggered operation lambda (create, update, delete) <code>region</code> str the region the record is from <code>size</code> int the size in bytes of the record <code>source</code> str the source of the event which invoked the lambda <code>source_arn</code> str the event source arn <code>stream_type</code> str the stream view type <code>version</code> str the event version <code>operation</code> str enum of <code>created</code>, <code>deleted</code>, <code>updated</code>"},{"location":"dynamodb/configuration-details/#recordregion","title":"<code>record.region</code>","text":"<pre><code>print(record.region);\n\n# output\n'us-east-2'\n</code></pre>"},{"location":"dynamodb/configuration-details/#recordid","title":"<code>record.id</code>","text":"<pre><code>print(record.id);\n\n# output\n'9a37c0d03eb60f7cf70cabc823de9907'\n</code></pre>"},{"location":"dynamodb/configuration-details/#recordname","title":"<code>record.name</code>","text":"<pre><code>print(record.name);\n\n# output\n'INSERT'\n</code></pre>"},{"location":"dynamodb/configuration-details/#recordsource","title":"<code>record.source</code>","text":"<pre><code>print(record.source);\n\n# output\n'aws:dynamodb'\n</code></pre>"},{"location":"dynamodb/configuration-details/#recordkeys","title":"<code>record.keys</code>","text":"Info <p>This is converted from the original DDB JSON to standard json</p> <pre><code>print(record.keys);\n\n# output\n{\n    'example_id': '123456789'\n}\n</code></pre>"},{"location":"dynamodb/configuration-details/#recordold_image","title":"<code>record.old_image</code>","text":"Info <p>This is converted from the original DDB JSON to standard json</p> <pre><code>print(record.old_image);\n\n# output\n{\n    'old_data': '123456789'\n}\n</code></pre>"},{"location":"dynamodb/configuration-details/#recordnew_image","title":"<code>record.new_image</code>","text":"Info <p>This is converted from the original DDB JSON to standard json</p> <pre><code>print(record.new_image);\n\n# output\n{\n    'new_data': '123456789'\n}\n</code></pre>"},{"location":"dynamodb/configuration-details/#recordbody","title":"<code>record.body</code>","text":"Info <p>This is converted from the original DDB JSON to standard json from <code>new_image</code></p> <pre><code>print(record.body);\n\n# output\n{\n    'new_data': '123456789'\n}\n</code></pre>"},{"location":"dynamodb/configuration-details/#recordoperation","title":"<code>record.operation</code>","text":"<pre><code>print(record.operation);\n\n# output\n'create'\n</code></pre>"},{"location":"dynamodb/configuration-details/#recordsource_arn","title":"<code>record.source_arn</code>","text":"<pre><code>print(record.source_arn);\n\n# output\n'arn:aws:dynamodb:us-east-1:771875143460:table/test-example/stream/2019-10-04T23:18:26.340'\n</code></pre>"},{"location":"dynamodb/configuration-details/#recordversion","title":"<code>record.version</code>","text":"<pre><code>print(record.version);\n\n# output\n'1.1'\n</code></pre>"},{"location":"dynamodb/configuration-details/#recordstream_type","title":"<code>record.stream_type</code>","text":"<pre><code>print(record.stream_type);\n\n# output\n'NEW_AND_OLD_IMAGES'\n</code></pre>"},{"location":"dynamodb/configuration-details/#recordsize","title":"<code>record.size</code>","text":"<pre><code>print(record.size);\n\n# output\n1124\n</code></pre>"},{"location":"dynamodb/configuration-details/#recordcreated","title":"<code>record.created</code>","text":"<pre><code>print(record.created);\n\n# output\n1538695200.0 #unix timestamp\n</code></pre>"},{"location":"dynamodb/configuration-details/#recordidentity","title":"<code>record.identity</code>","text":"<pre><code>print(record.identity);\n\n# output\n{\n    'type': 'Service',\n    'principalId': 'dynamodb.amazonaws.com'\n}\n</code></pre>"},{"location":"dynamodb/configuration-details/#recordexpired","title":"<code>record.expired</code>","text":"<pre><code>print(record.expired);\n\n# output\nFalse\n</code></pre>"},{"location":"dynamodb/quickstart/","title":"Quickstart","text":""},{"location":"dynamodb/quickstart/#dynamodb-quickstart","title":"DynamoDB Quickstart","text":"<p>Event handler for Amazon DynamoDB Stream Events.</p>"},{"location":"dynamodb/quickstart/#features","title":"Features","text":"<ul> <li>Automatically convert DynamoDB JSON dict to standard JSON dict</li> <li>Only run on certain DynamoDB operations; i.e. when items are created, updated or deleted</li> <li>Able to validate DynamoDB record against a JSON Schema</li> <li>Assign Data Classes to records instead of getting DynamoDB JSON dicts</li> </ul>"},{"location":"dynamodb/quickstart/#installation","title":"Installation","text":"Shell <pre><code>$ pip install acai_aws\n# pipenv install acai_aws\n# poetry add acai_aws\n</code></pre>"},{"location":"dynamodb/quickstart/#minimal-setup","title":"Minimal Setup","text":"<p>After installation, create a handler file and configure the AWS lambda to use that file as its handler.</p> dynamodb.pyserverless.yml <pre><code>from acai_aws.dynamodb.requirements import requirements\n\n@requirements(\n    operations=['created', 'deleted']\n)\ndef handle(event):\n    for record in event.records:\n        print(record)\n</code></pre> <pre><code>functions:\nddb-handler:\nhandler: service/handlers/dynamodb.handle\nmemorySize: 512\ntimeout: 30\nevents:\n- stream:\ntype: dynamodb\narn:\nFn::GetAtt: [ SomeDDBTable, StreamArn ]\n</code></pre>"},{"location":"firehose/configuration-details/","title":"Configurations Details","text":""},{"location":"firehose/configuration-details/#firehose-configurations-details","title":"Firehose Configurations Details","text":"<p>The firehose event will automatically handle many common things done when eventing off a firehose stream.  Developers then have the ability to further extend that functionality with custom middleware.  Below is a full list of all the configurations available and examples of their use.</p> Examples <p>Don't like reading documentation? Then look at  our examples, which can be deployed  in 1 command into your AWS account! </p>"},{"location":"firehose/configuration-details/#lambda-configuration","title":"Lambda Configuration","text":"serverless.yml <pre><code>functions:\nfirehose-handler:\nhandler: service/handlers/firehose.handle\nmemorySize: 512\ntimeout: 30\nevents:\n- stream:\ntype: firehose\narn:\nFn::GetAtt: [ MyfirehoseStream, Arn ]\n</code></pre>"},{"location":"firehose/configuration-details/#requirements-configuration-options","title":"Requirements Configuration Options","text":"option type required default description <code>before</code> func no None a custom function to be ran before your records are pulled <code>after</code> func no None a custom function to be ran after your records are pulled <code>data_class</code> class no None a custom class that will be passed instead of the records object <code>raise_body_error</code> bool no False will raise exception if body of record does not match schema provided <code>required_body</code> str or dict no None will validate body of record against this schema <code>schema</code> str no None file path pointing to the location of the openapi.yml file <pre><code>from acai_aws.firehose.requirements import requirements\n\n# example data class\nclass SomeClass:\n    def __init__(self, record):\n        for k, v in record.body.items():\n            setattr(self, k, v)\n\n# example before function\ndef log_something(records, requirements):\n    if 'something' in requirements:\n        print(records) \n\n# example after function\ndef alert_something(records, result, requirements):\n    if 'something' in result and 'alert' in requirements:\n        print(records)\n\n@requirements(\n    before=log_something,\n    data_class=SomeClass,\n    raise_operation_error=True,\n    raise_body_error=True,\n    schema='service/openapi.yml',\n    required_body='v1-firehose-body', # or send jsonschema dict; schema kwarg not needed if sending jsonschema dict\n    after=alert_something,\n)\ndef handle(event):\n    for record in event.records:\n        print(record)\n</code></pre>"},{"location":"firehose/configuration-details/#firehose-record-properties","title":"Firehose Record Properties","text":"property type description <code>record_id</code> str record id of the stream <code>epoc_time_stamp</code> int epoc time stamp of the stream <code>shard_id</code> str shard id arn of the stream <code>subsequence_number</code> str subsequence number arn of the stream <code>partition_key</code> str partition key <code>time_stamp</code> str time stamp <code>sequence_number</code> str sequence number <code>data</code> any can be anything, automaticallyed b64 decoded objects <code>body</code> any can be anything, automaticallyed b64 decoded objects"},{"location":"firehose/configuration-details/#recordrecord_id","title":"<code>record.record_id</code>","text":"<pre><code>print(record.record_id);\n\n# output\n'record1'\n</code></pre>"},{"location":"firehose/configuration-details/#recordepoc_time_stamp","title":"<code>record.epoc_time_stamp</code>","text":"<pre><code>print(record.epoc_time_stamp);\n\n# output\n1510772160000\n</code></pre>"},{"location":"firehose/configuration-details/#recordshard_id","title":"<code>record.shard_id</code>","text":"<pre><code>print(record.shard_id);\n\n# output\n'shardId-000000000000'\n</code></pre>"},{"location":"firehose/configuration-details/#recordsubsequence_number","title":"<code>record.subsequence_number</code>","text":"<pre><code>print(record.subsequence_number);\n\n# output\n''\n</code></pre>"},{"location":"firehose/configuration-details/#recordpartition_key","title":"<code>record.partition_key</code>","text":"<pre><code>print(record.partition_key);\n\n# output\n'1'\n</code></pre>"},{"location":"firehose/configuration-details/#recordtime_stamp","title":"<code>record.time_stamp</code>","text":"<pre><code>print(record.time_stamp);\n\n# output\n1545084650.987\n</code></pre>"},{"location":"firehose/configuration-details/#recordsequence_number","title":"<code>record.sequence_number</code>","text":"<pre><code>print(record.sequence_number);\n\n# output\n49590338271490256608559692538361571095921575989136588898\n</code></pre>"},{"location":"firehose/configuration-details/#recorddata","title":"<code>record.data</code>","text":"<pre><code>print(record.data);\n\n# output\n{\n    'new_data': '123456789'\n}\n</code></pre>"},{"location":"firehose/configuration-details/#recordbody","title":"<code>record.body</code>","text":"<pre><code>print(record.body);\n\n# output\n{\n    'new_data': '123456789'\n}\n</code></pre>"},{"location":"firehose/quickstart/","title":"Quickstart","text":""},{"location":"firehose/quickstart/#firehose-quickstart","title":"Firehose Quickstart","text":"<p>Event handler for Amazon firehose Stream Events.</p>"},{"location":"firehose/quickstart/#features","title":"Features","text":"<ul> <li>Automatically decode firehose base 64 string into dict (or whatever the decode thing is)</li> <li>Able to validate firehose record against a JSON Schema</li> <li>Assign Data Classes to records instead of getting firehose JSON dicts</li> </ul>"},{"location":"firehose/quickstart/#installation","title":"Installation","text":"Shell <pre><code>$ pip install acai_aws\n# pipenv install acai_aws\n# poetry add acai_aws\n</code></pre>"},{"location":"firehose/quickstart/#minimal-setup","title":"Minimal Setup","text":"<p>After installation, create a handler file and configure the AWS lambda to use that file as its handler.</p> firehose.pyserverless.yml <pre><code>from acai_aws.firehose.requirements import requirements\n\n@requirements()\ndef handle(event):\n    for record in event.records:\n        print(record)\n</code></pre> <pre><code>functions:\nfirehose-handler:\nhandler: service/handlers/firehose.handle\nmemorySize: 512\ntimeout: 30\nevents:\n- stream:\ntype: firehose\narn:\nFn::GetAtt: [ MyFirehoseStream, Arn ]\n</code></pre>"},{"location":"generic/configuration-details/","title":"Configurations Details","text":""},{"location":"generic/configuration-details/#generic-aws-console-or-cli-configurations-details","title":"Generic (AWS Console or CLI) Configurations Details","text":"<p>The generic event will automatically handle many common things done when eventing off a generic event invoked manually or programmatically.  Developers then have the ability to further extend that functionality with custom middleware.  Below is a full list of all the configurations available and examples of their use.</p> Examples <p>Don't like reading documentation? Then look at  our examples, which can be deployed  in 1 command into your AWS account! </p>"},{"location":"generic/configuration-details/#lambda-configuration","title":"Lambda Configuration","text":"serverless.yml <pre><code>functions:\ngeneric-handler:\nhandler: service/handlers/generic.handle\nmemorySize: 512\ntimeout: 30\n</code></pre>"},{"location":"generic/configuration-details/#requirements-configuration-options","title":"Requirements Configuration Options","text":"option type required default description <code>before</code> func no None a custom function to be ran before your records are pulled <code>after</code> func no None a custom function to be ran after your records are pulled <code>data_class</code> class no None a custom class that will be passed instead of the records object <code>raise_body_error</code> bool no False will raise exception if body of record does not match schema provided <code>required_body</code> str or dict no None will validate body of record against this schema <code>schema</code> str no None file path pointing to the location of the openapi.yml file <pre><code>from acai_aws.firehose.requirements import requirements\n\n# example data class\nclass SomeClass:\n    def __init__(self, record):\n        for k, v in record.body.items():\n            setattr(self, k, v)\n\n# example before function\ndef log_something(records, requirements):\n    print(event.body) \n\n# example after function\ndef alert_something(event, result, requirements):\n    if 'something' in result and 'alert' in requirements:\n        print(event)\n\n@requirements(\n    before=log_something,\n    data_class=SomeClass,\n    raise_operation_error=True,\n    raise_body_error=True,\n    schema='service/openapi.yml',\n    required_body='v1-generic-body', # or send jsonschema dict; schema kwarg not needed if sending jsonschema dict\n    after=alert_something,\n)\ndef handle(event):\n    print(event.body)\n</code></pre>"},{"location":"generic/configuration-details/#generic-event-properties","title":"Generic Event Properties","text":"property type description <code>body</code> any can be anything, automaticallyed b64 decoded objects"},{"location":"generic/configuration-details/#eventbody","title":"<code>event.body</code>","text":"<pre><code>print(event.body);\n\n# output\n{\n    'new_data': '123456789'\n}\n</code></pre>"},{"location":"generic/quickstart/","title":"Quickstart","text":""},{"location":"generic/quickstart/#generic-aws-console-or-cli-quickstart","title":"Generic (AWS Console or CLI) Quickstart","text":"<p>Event handler for Amazon generic (AWS Console or CLI) Events.</p>"},{"location":"generic/quickstart/#features","title":"Features","text":"<ul> <li>Automatically convert body into dict</li> <li>Able to validate body of record against a JSON Schema</li> <li>Assign Data Classes to records instead of getting firehose JSON dicts</li> </ul>"},{"location":"generic/quickstart/#installation","title":"Installation","text":"Shell <pre><code>$ pip install acai_aws\n# pipenv install acai_aws\n# poetry add acai_aws\n</code></pre>"},{"location":"generic/quickstart/#minimal-setup","title":"Minimal Setup","text":"<p>After installation, create a handler file and configure the AWS lambda to use that file as its handler.</p> generic.pyserverless.yml <pre><code>from acai_aws.generic.requirements import requirements\n\n@requirements()\ndef handle(event):\n    print(event.body)\n</code></pre> <pre><code>functions:\ngeneric-handler:\nhandler: service/handlers/generic.handle\nmemorySize: 512\ntimeout: 30\n</code></pre>"},{"location":"kinesis/configuration-details/","title":"Configurations Details","text":""},{"location":"kinesis/configuration-details/#kinesis-configurations-details","title":"Kinesis Configurations Details","text":"<p>The kinesis event will automatically handle many common things done when eventing off a kinesis stream.  Developers then have the ability to further extend that functionality with custom middleware.  Below is a full list of all the configurations available and examples of their use.</p> Examples <p>Don't like reading documentation? Then look at  our examples, which can be deployed  in 1 command into your AWS account! </p>"},{"location":"kinesis/configuration-details/#lambda-configuration","title":"Lambda Configuration","text":"serverless.yml <pre><code>functions:\nkinesis-handler:\nhandler: service/handlers/kinesis.handle\nmemorySize: 512\ntimeout: 30\nevents:\n- stream:\ntype: kinesis\narn:\nFn::GetAtt: [ MyKinesisStream, Arn ]\n</code></pre>"},{"location":"kinesis/configuration-details/#requirements-configuration-options","title":"Requirements Configuration Options","text":"option type required default description <code>before</code> func no None a custom function to be ran before your records are pulled <code>after</code> func no None a custom function to be ran after your records are pulled <code>data_class</code> class no None a custom class that will be passed instead of the records object <code>raise_body_error</code> bool no False will raise exception if body of record does not match schema provided <code>required_body</code> str or dict no None will validate body of record against this schema <code>schema</code> str no None file path pointing to the location of the openapi.yml file <pre><code>from acai_aws.kinesis.requirements import requirements\n\n# example data class\nclass SomeClass:\n    def __init__(self, record):\n        for k, v in record.body.items():\n            setattr(self, k, v)\n\n# example before function\ndef log_something(records, requirements):\n    if 'something' in requirements:\n        print(records) \n\n# example after function\ndef alert_something(records, result, requirements):\n    if 'something' in result and 'alert' in requirements:\n        print(records)\n\n@requirements(\n    before=log_something,\n    data_class=SomeClass,\n    raise_operation_error=True,\n    raise_body_error=True,\n    schema='service/openapi.yml',\n    required_body='v1-kinesis-body', # or send jsonschema dict; schema kwarg not needed if sending jsonschema dict\n    after=alert_something,\n)\ndef handle(event):\n    for record in event.records:\n        print(record)\n</code></pre>"},{"location":"kinesis/configuration-details/#kinesis-record-properties","title":"Kinesis Record Properties","text":"property type description <code>id</code> str id of the stream <code>name</code> str name of the stream <code>source_arn</code> str source arn of the stream <code>region</code> str region arn of the stream <code>version</code> str version arn of the stream <code>invoke_identity_arn</code> str arn of the indentity <code>schema_version</code> str schema version <code>partition_key</code> str partition key <code>time_stamp</code> str time stamp <code>sequence_number</code> str sequence number <code>data</code> any can be anything, automaticallyed b64 decoded objects <code>body</code> any can be anything, automaticallyed b64 decoded objects"},{"location":"kinesis/configuration-details/#recordid","title":"<code>record.id</code>","text":"<pre><code>print(record.id);\n\n# output\n'shardId-000000000006:49590338271490256608559692538361571095921575989136588898'\n</code></pre>"},{"location":"kinesis/configuration-details/#recordname","title":"<code>record.name</code>","text":"<pre><code>print(record.name);\n\n# output\n'aws:kinesis:record'\n</code></pre>"},{"location":"kinesis/configuration-details/#recordsource_arn","title":"<code>record.source_arn</code>","text":"<pre><code>print(record.source_arn);\n\n# output\n'arn:aws:kinesis:us-east-2:123456789012:stream/lambda-stream'\n</code></pre>"},{"location":"kinesis/configuration-details/#recordregion","title":"<code>record.region</code>","text":"<pre><code>print(record.region);\n\n# output\n'us-east-2'\n</code></pre>"},{"location":"kinesis/configuration-details/#recordversion","title":"<code>record.version</code>","text":"<pre><code>print(record.version);\n\n# output\n'1.0'\n</code></pre>"},{"location":"kinesis/configuration-details/#recordinvoke_identity_arn","title":"<code>record.invoke_identity_arn</code>","text":"<pre><code>print(record.invoke_identity_arn);\n\n# output\n'arn:aws:iam::123456789012:role/lambda-role'\n</code></pre>"},{"location":"kinesis/configuration-details/#recordschema_version","title":"<code>record.schema_version</code>","text":"<pre><code>print(record.schema_version);\n\n# output\n'1.0'\n</code></pre>"},{"location":"kinesis/configuration-details/#recordpartition_key","title":"<code>record.partition_key</code>","text":"<pre><code>print(record.partition_key);\n\n# output\n'1'\n</code></pre>"},{"location":"kinesis/configuration-details/#recordtime_stamp","title":"<code>record.time_stamp</code>","text":"<pre><code>print(record.time_stamp);\n\n# output\n1545084650.987\n</code></pre>"},{"location":"kinesis/configuration-details/#recordsequence_number","title":"<code>record.sequence_number</code>","text":"<pre><code>print(record.sequence_number);\n\n# output\n49590338271490256608559692538361571095921575989136588898\n</code></pre>"},{"location":"kinesis/configuration-details/#recorddata","title":"<code>record.data</code>","text":"<pre><code>print(record.data);\n\n# output\n{\n    'new_data': '123456789'\n}\n</code></pre>"},{"location":"kinesis/configuration-details/#recordbody","title":"<code>record.body</code>","text":"<pre><code>print(record.body);\n\n# output\n{\n    'new_data': '123456789'\n}\n</code></pre>"},{"location":"kinesis/quickstart/","title":"Quickstart","text":""},{"location":"kinesis/quickstart/#kinesis-quickstart","title":"Kinesis Quickstart","text":"<p>Event handler for Amazon Kinesis Stream Events.</p>"},{"location":"kinesis/quickstart/#features","title":"Features","text":"<ul> <li>Automatically decode kinesis base 64 string into dict (or whatever the decode thing is)</li> <li>Able to validate Kinesis record against a JSON Schema</li> <li>Assign Data Classes to records instead of getting Kinesis JSON dicts</li> </ul>"},{"location":"kinesis/quickstart/#installation","title":"Installation","text":"Shell <pre><code>$ pip install acai_aws\n# pipenv install acai_aws\n# poetry add acai_aws\n</code></pre>"},{"location":"kinesis/quickstart/#minimal-setup","title":"Minimal Setup","text":"<p>After installation, create a handler file and configure the AWS lambda to use that file as its handler.</p> kinesis.pyserverless.yml <pre><code>from acai_aws.kinesis.requirements import requirements\n\n@requirements()\ndef handle(event):\n    for record in event.records:\n        print(record)\n</code></pre> <pre><code>functions:\nkinesis-handler:\nhandler: service/handlers/Kinesis.handle\nmemorySize: 512\ntimeout: 30\nevents:\n- stream:\ntype: Kinesis\narn:\nFn::GetAtt: [ MyKinesisStream, Arn ]\n</code></pre>"},{"location":"mq/configuration-details/","title":"Configurations Details","text":""},{"location":"mq/configuration-details/#mq-configurations-details","title":"MQ Configurations Details","text":"<p>The mq event will automatically handle many common things done when eventing off a generic event invoked manually or programmatically.  Developers then have the ability to further extend that functionality with custom middleware.  Below is a full list of all the configurations available and examples of their use.</p> Examples <p>Don't like reading documentation? Then look at  our examples, which can be deployed  in 1 command into your AWS account! </p>"},{"location":"mq/configuration-details/#lambda-configuration","title":"Lambda Configuration","text":"serverless.yml <pre><code>functions:\ngeneric-handler:\nhandler: service/handlers/mq.handle\nmemorySize: 512\ntimeout: 30\nevents:\n- rabbitmq:\narn: arn:aws:mq:us-east-1:0000:broker:ExampleMQBroker:b-xxx-xxx\nqueue: queue-name\nbasicAuthArn: arn:aws:secretsmanager:us-east-1:01234567890:secret:MySecret\n</code></pre>"},{"location":"mq/configuration-details/#requirements-configuration-options","title":"Requirements Configuration Options","text":"option type required default description <code>before</code> func no None a custom function to be ran before your records are pulled <code>after</code> func no None a custom function to be ran after your records are pulled <code>data_class</code> class no None a custom class that will be passed instead of the records object <code>raise_body_error</code> bool no False will raise exception if body of record does not match schema provided <code>required_body</code> str or dict no None will validate body of record against this schema <code>schema</code> str no None file path pointing to the location of the openapi.yml file <pre><code>from acai_aws.firehose.requirements import requirements\n\n# example data class\nclass SomeClass:\n    def __init__(self, record):\n        for k, v in record.body.items():\n            setattr(self, k, v)\n\n# example before function\ndef log_something(records, requirements):\n    print(event.body) \n\n# example after function\ndef alert_something(event, result, requirements):\n    if 'something' in result and 'alert' in requirements:\n        print(event)\n\n@requirements(\n    before=log_something,\n    data_class=SomeClass,\n    raise_operation_error=True,\n    raise_body_error=True,\n    schema='service/openapi.yml',\n    required_body='v1-mq-body', # or send jsonschema dict; schema kwarg not needed if sending jsonschema dict\n    after=alert_something,\n)\ndef handle(event):\n    for record in event.records:\n        print(record.body)\n</code></pre>"},{"location":"mq/configuration-details/#mq-event-properties","title":"MQ Event Properties","text":"property type description <code>message_id</code> str id of the message <code>message_type</code> str type of the message <code>delivery_mode</code> int mode of delivery <code>reply_to</code> str (nullable) reply to string <code>record_type</code> str (nullable) type of record <code>expiration</code> str expiration of message <code>priority</code> int priority of message <code>correlation_id</code> str correlation id of message <code>redelivered</code> bool whether the message has been redelivered <code>destination</code> dict destination of the message <code>properties</code> dict properties of the message <code>time_stamp</code> int time_stamp of the message <code>in_time</code> int in time of the message <code>out_time</code> int out time of the message <code>body</code> any body of the message <code>data</code> any data of the message"},{"location":"mq/configuration-details/#recordmessage_id","title":"<code>record.message_id</code>","text":"<pre><code>print(record.message_id);\n\n# output\n'ID:b-9bcfa592-423a-4942-879d-eb284b418fc8-1.mq.us-west-2.amazonaws.com-37557-1234520418293-4:1:1:1:1'\n</code></pre>"},{"location":"mq/configuration-details/#recordmessage_type","title":"<code>record.message_type</code>","text":"<pre><code>print(record.message_type);\n\n# output\n'jms/text-message'\n</code></pre>"},{"location":"mq/configuration-details/#recorddelivery_mode","title":"<code>record.delivery_mode</code>","text":"<pre><code>print(record.delivery_mode);\n\n# output\n1\n</code></pre>"},{"location":"mq/configuration-details/#recordreply_to","title":"<code>record.reply_to</code>","text":"<pre><code>print(record.reply_to);\n\n# output\nNone\n</code></pre>"},{"location":"mq/configuration-details/#recordrecord_type","title":"<code>record.record_type</code>","text":"<pre><code>print(record.record_type);\n\n# output\nNone\n</code></pre>"},{"location":"mq/configuration-details/#recordexpiration","title":"<code>record.expiration</code>","text":"<pre><code>print(record.expiration);\n\n# output\n'60000'\n</code></pre>"},{"location":"mq/configuration-details/#recordpriority","title":"<code>record.priority</code>","text":"<pre><code>print(record.priority);\n\n# output\n1\n</code></pre>"},{"location":"mq/configuration-details/#recordcorrelation_id","title":"<code>record.correlation_id</code>","text":"<pre><code>print(record.correlation_id);\n\n# output\n'myJMSCoID'\n</code></pre>"},{"location":"mq/configuration-details/#recordredelivered","title":"<code>record.redelivered</code>","text":"<pre><code>print(record.redelivered);\n\n# output\nFalse\n</code></pre>"},{"location":"mq/configuration-details/#recorddestination","title":"<code>record.destination</code>","text":"<pre><code>print(record.destination);\n\n# output\n{\n    'physicalName': 'testQueue'\n}\n</code></pre>"},{"location":"mq/configuration-details/#recordproperties","title":"<code>record.properties</code>","text":"<pre><code>print(record.properties);\n\n# output\n{\n    'index': '1',\n    'doAlarm': 'false',\n    'myCustomProperty': 'value'\n}\n</code></pre>"},{"location":"mq/configuration-details/#recordtime_stamp","title":"<code>record.time_stamp</code>","text":"<pre><code>print(record.time_stamp);\n\n# output\n1598827811958\n</code></pre>"},{"location":"mq/configuration-details/#recordin_time","title":"<code>record.in_time</code>","text":"<pre><code>print(record.in_time);\n\n# output\n1598827811958\n</code></pre>"},{"location":"mq/configuration-details/#recordout_time","title":"<code>record.out_time</code>","text":"<pre><code>print(record.out_time);\n\n# output\n1598827811959\n</code></pre>"},{"location":"mq/configuration-details/#recordbody","title":"<code>record.body</code>","text":"<pre><code>print(record.body);\n\n# output\n{\n    'new_data': '123456789'\n}\n</code></pre>"},{"location":"mq/configuration-details/#recorddata","title":"<code>record.data</code>","text":"<pre><code>print(record.data);\n\n# output\n{\n    'new_data': '123456789'\n}\n</code></pre>"},{"location":"mq/quickstart/","title":"Quickstart","text":""},{"location":"mq/quickstart/#mq-quickstart","title":"MQ Quickstart","text":"<p>Event handler for Amazon MQ Events.</p>"},{"location":"mq/quickstart/#features","title":"Features","text":"<ul> <li>Automatically decode base 64 string into dict (or whatever the decode thing is)</li> <li>Able to validate body of record against a JSON Schema</li> <li>Assign Data Classes to records instead of getting firehose JSON dicts</li> </ul>"},{"location":"mq/quickstart/#installation","title":"Installation","text":"Shell <pre><code>$ pip install acai_aws\n# pipenv install acai_aws\n# poetry add acai_aws\n</code></pre>"},{"location":"mq/quickstart/#minimal-setup","title":"Minimal Setup","text":"<p>After installation, create a handler file and configure the AWS lambda to use that file as its handler.</p> generic.pyserverless.yml <pre><code>from acai_aws.mq.requirements import requirements\n\n@requirements()\ndef handle(event):\n    for record in event.records:\n        print(record.body)\n</code></pre> <pre><code>functions:\nmq-handler:\nhandler: service/handlers/mq.handle\nmemorySize: 512\ntimeout: 30\nevents:\n- rabbitmq:\narn: arn:aws:mq:us-east-1:0000:broker:ExampleMQBroker:b-xxx-xxx\nqueue: queue-name\nbasicAuthArn: arn:aws:secretsmanager:us-east-1:01234567890:secret:MySecret\n</code></pre>"},{"location":"msk/configuration-details/","title":"Configurations Details","text":""},{"location":"msk/configuration-details/#msk-configurations-details","title":"MSK Configurations Details","text":"<p>The msk event will automatically handle many common things done when eventing off a generic event invoked manually or programmatically.  Developers then have the ability to further extend that functionality with custom middleware.  Below is a full list of all the configurations available and examples of their use.</p> Examples <p>Don't like reading documentation? Then look at  our examples, which can be deployed  in 1 command into your AWS account! </p>"},{"location":"msk/configuration-details/#lambda-configuration","title":"Lambda Configuration","text":"serverless.yml <pre><code>functions:\nmsk-handler:\nhandler: service/handlers/msk.handle\nmemorySize: 512\ntimeout: 30\nevents:\n- msk:\narn: arn:aws:kafka:region:XXXXXX:cluster/MyCluster/xxxx-xxxxx-xxxx\ntopic: mytopic\n</code></pre>"},{"location":"msk/configuration-details/#requirements-configuration-options","title":"Requirements Configuration Options","text":"option type required default description <code>before</code> func no None a custom function to be ran before your records are pulled <code>after</code> func no None a custom function to be ran after your records are pulled <code>data_class</code> class no None a custom class that will be passed instead of the records object <code>raise_body_error</code> bool no False will raise exception if body of record does not match schema provided <code>required_body</code> str or dict no None will validate body of record against this schema <code>schema</code> str no None file path pointing to the location of the openapi.yml file <pre><code>from acai_aws.firehose.requirements import requirements\n\n# example data class\nclass SomeClass:\n    def __init__(self, record):\n        for k, v in record.body.items():\n            setattr(self, k, v)\n\n# example before function\ndef log_something(records, requirements):\n    print(event.body) \n\n# example after function\ndef alert_something(event, result, requirements):\n    if 'something' in result and 'alert' in requirements:\n        print(event)\n\n@requirements(\n    before=log_something,\n    data_class=SomeClass,\n    raise_operation_error=True,\n    raise_body_error=True,\n    schema='service/openapi.yml',\n    required_body='v1-msk-body', # or send jsonschema dict; schema kwarg not needed if sending jsonschema dict\n    after=alert_something,\n)\ndef handle(event):\n    for record in event.records:\n        print(record.body)\n</code></pre>"},{"location":"msk/configuration-details/#mq-event-properties","title":"MQ Event Properties","text":"property type description <code>message_id</code> str id of the message <code>message_type</code> str type of the message <code>delivery_mode</code> int mode of delivery <code>reply_to</code> str (nullable) reply to string <code>record_type</code> str (nullable) type of record <code>expiration</code> str expiration of message <code>priority</code> int priority of message <code>correlation_id</code> str correlation id of message <code>redelivered</code> bool whether the message has been redelivered <code>destination</code> dict destination of the message <code>properties</code> dict properties of the message <code>time_stamp</code> int time_stamp of the message <code>in_time</code> int in time of the message <code>out_time</code> int out time of the message <code>body</code> any body of the message <code>data</code> any data of the message"},{"location":"msk/configuration-details/#recordmessage_id","title":"<code>record.message_id</code>","text":"<pre><code>print(record.message_id);\n\n# output\n'ID:b-9bcfa592-423a-4942-879d-eb284b418fc8-1.mq.us-west-2.amazonaws.com-37557-1234520418293-4:1:1:1:1'\n</code></pre>"},{"location":"msk/configuration-details/#recordmessage_type","title":"<code>record.message_type</code>","text":"<pre><code>print(record.message_type);\n\n# output\n'jms/text-message'\n</code></pre>"},{"location":"msk/configuration-details/#recorddelivery_mode","title":"<code>record.delivery_mode</code>","text":"<pre><code>print(record.delivery_mode);\n\n# output\n1\n</code></pre>"},{"location":"msk/configuration-details/#recordreply_to","title":"<code>record.reply_to</code>","text":"<pre><code>print(record.reply_to);\n\n# output\nNone\n</code></pre>"},{"location":"msk/configuration-details/#recordrecord_type","title":"<code>record.record_type</code>","text":"<pre><code>print(record.record_type);\n\n# output\nNone\n</code></pre>"},{"location":"msk/configuration-details/#recordexpiration","title":"<code>record.expiration</code>","text":"<pre><code>print(record.expiration);\n\n# output\n'60000'\n</code></pre>"},{"location":"msk/configuration-details/#recordpriority","title":"<code>record.priority</code>","text":"<pre><code>print(record.priority);\n\n# output\n1\n</code></pre>"},{"location":"msk/configuration-details/#recordcorrelation_id","title":"<code>record.correlation_id</code>","text":"<pre><code>print(record.correlation_id);\n\n# output\n'myJMSCoID'\n</code></pre>"},{"location":"msk/configuration-details/#recordredelivered","title":"<code>record.redelivered</code>","text":"<pre><code>print(record.redelivered);\n\n# output\nFalse\n</code></pre>"},{"location":"msk/configuration-details/#recorddestination","title":"<code>record.destination</code>","text":"<pre><code>print(record.destination);\n\n# output\n{\n    'physicalName': 'testQueue'\n}\n</code></pre>"},{"location":"msk/configuration-details/#recordproperties","title":"<code>record.properties</code>","text":"<pre><code>print(record.properties);\n\n# output\n{\n    'index': '1',\n    'doAlarm': 'false',\n    'myCustomProperty': 'value'\n}\n</code></pre>"},{"location":"msk/configuration-details/#recordtime_stamp","title":"<code>record.time_stamp</code>","text":"<pre><code>print(record.time_stamp);\n\n# output\n1598827811958\n</code></pre>"},{"location":"msk/configuration-details/#recordin_time","title":"<code>record.in_time</code>","text":"<pre><code>print(record.in_time);\n\n# output\n1598827811958\n</code></pre>"},{"location":"msk/configuration-details/#recordout_time","title":"<code>record.out_time</code>","text":"<pre><code>print(record.out_time);\n\n# output\n1598827811959\n</code></pre>"},{"location":"msk/configuration-details/#recordbody","title":"<code>record.body</code>","text":"<pre><code>print(record.body);\n\n# output\n{\n    'new_data': '123456789'\n}\n</code></pre>"},{"location":"msk/configuration-details/#recorddata","title":"<code>record.data</code>","text":"<pre><code>print(record.data);\n\n# output\n{\n    'new_data': '123456789'\n}\n</code></pre>"},{"location":"msk/quickstart/","title":"Quickstart","text":""},{"location":"msk/quickstart/#msk-quickstart","title":"MSK Quickstart","text":"<p>Event handler for Amazon MSK Events.</p>"},{"location":"msk/quickstart/#features","title":"Features","text":"<ul> <li>Automatically decodes base 64 string into dict (or whatever the decode thing is)</li> <li>Able to validate body of record against a JSON Schema</li> <li>Assign Data Classes to records instead of getting firehose JSON dicts</li> </ul>"},{"location":"msk/quickstart/#installation","title":"Installation","text":"Shell <pre><code>$ pip install acai_aws\n# pipenv install acai_aws\n# poetry add acai_aws\n</code></pre>"},{"location":"msk/quickstart/#minimal-setup","title":"Minimal Setup","text":"<p>After installation, create a handler file and configure the AWS lambda to use that file as its handler.</p> generic.pyserverless.yml <pre><code>from acai_aws.msk.requirements import requirements\n\n@requirements()\ndef handle(event):\n    for record in event.records:\n        print(record.body)\n</code></pre> <pre><code>functions:\nmsk-handler:\nhandler: service/handlers/msk.handle\nmemorySize: 512\ntimeout: 30\nevents:\n- msk:\narn: arn:aws:kafka:region:XXXXXX:cluster/MyCluster/xxxx-xxxxx-xxxx\ntopic: mytopic\n</code></pre>"},{"location":"s3/configuration-details/","title":"Configurations Details","text":""},{"location":"s3/configuration-details/#s3-configurations-details","title":"S3 Configurations Details","text":"<p>The S3 event will automatically handle many common things done when eventing off a S3 event. Developers then have the  ability to further extend that functionality with custom middleware. Below is a full list of all the configurations  available and examples of their use.</p> Examples <p>Don't like reading documentation? Then look at  our examples, which can be deployed in 1  command into your AWS account! </p>"},{"location":"s3/configuration-details/#lambda-configuration","title":"Lambda Configuration","text":"serverless.yml <pre><code>functions:\ns3-handler:\nhandler: service/handlers/s3.handle\nmemorySize: 512\ntimeout: 900\nevents:\n- s3:\nbucket: uploadsBucket\nevent: s3:ObjectCreated:*\n</code></pre>"},{"location":"s3/configuration-details/#requirements-configuration-options","title":"Requirements Configuration Options","text":"option type required default description <code>before</code> func no None a custom function to be ran before your records are pulled <code>after</code> func no None a custom function to be ran after your records are pulled <code>data_class</code> class no None a custom class that will be passed instead of the records object <code>data_type</code> enum (str) no ['json', 'csv'] will convert data to a dict based on type; <code>requires get_object=True</code> <code>get_object</code> bool no False will download object from s3 bucket and hold in memory <code>operations</code> list no ['created', 'updated', 'deleted'] will only run if record was created from the listed operation <code>raise_operation_error</code> bool no False will raise exception if operation of record is not from listed operations <code>raise_body_error</code> bool no False will raise exception if body of record does not match schema provided <code>required_body</code> str or dict no None will validate body of record against this schema <code>schema</code> str no None file path pointing to the location of the openapi.yml file <pre><code>from acai_aws.s3.requirements import requirements\n\n# example data class (requires, get_object=True and a data_type)\nclass SomeClass:\n    def __init__(self, record):\n        for k, v in record.body.items():\n            setattr(self, k, v)\n\n# example before function\ndef log_something(records, requirements):\n    if 'something' in requirements:\n        print(records) \n\n# example after function\ndef alert_something(records, result, requirements):\n    if 'something' in result and 'alert' in requirements:\n        print(records)\n\n@requirements(\n    before=log_something,\n    get_object=True,\n    data_type='json',\n    data_class=SomeClass,\n    raise_body_error=True, # requires, get_object=True and a data_type\n    schema='service/openapi.yml',\n    required_body='v1-s3-body', # or send jsonschema dict; schema kwarg not needed if sending jsonschema dict\n    after=alert_something,\n)\ndef handle(event):\n    for record in event.records:\n        print(record)\n</code></pre>"},{"location":"s3/configuration-details/#s3-record-properties","title":"S3 Record Properties","text":"property type description <code>name</code> str the name of the event <code>source</code> str the source of the event <code>version</code> str the version of the event <code>time</code> str the time of the event <code>region</code> str the region of the event <code>request</code> dict the request parameters of the event <code>response</code> dict the response parameters of the event <code>configuration_id</code> str the configuration id <code>object</code> dict the object dict of the event <code>bucket</code> dict the bucket dict of the event <code>bucket</code> dict the bucket dict of the event <code>bucket_arn</code> str the arn of the bucket <code>bucket_owner</code> str the owner of the bucket <code>key</code> str the key owner of the object <code>schema_version</code> str the schema version <code>user_identity</code> str the user identity <code>operation</code> enum (str) enum of <code>created</code>, <code>deleted</code>, <code>updated</code> <code>body</code> dict,bytes the body of file in the s3 bucket"},{"location":"s3/configuration-details/#recordname","title":"<code>record.name</code>","text":"<pre><code>print(record.name)\n\n# output\n'ObjectRemoved: Put'\n</code></pre>"},{"location":"s3/configuration-details/#recordsource","title":"<code>record.source</code>","text":"<pre><code>print(record.source)\n\n# output\n'aws:s3'\n</code></pre>"},{"location":"s3/configuration-details/#recordversion","title":"<code>record.version</code>","text":"<pre><code>print(record.version)\n\n# output\n'2.0'\n</code></pre>"},{"location":"s3/configuration-details/#recordtime","title":"<code>record.time</code>","text":"<pre><code>print(record.time)\n\n# output\n'2018-09-20T21: 10: 13.821Z'\n</code></pre>"},{"location":"s3/configuration-details/#recordregion","title":"<code>record.region</code>","text":"<pre><code>print(record.region)\n\n# output\n'us-east-1'\n</code></pre>"},{"location":"s3/configuration-details/#recordrequest","title":"<code>record.request</code>","text":"<pre><code>print(record.request)\n\n# output\n{\n    'sourceIPAddress': '172.20.133.36'\n}\n</code></pre>"},{"location":"s3/configuration-details/#recordresponse","title":"<code>record.response</code>","text":"<pre><code>print(record.response)\n\n# output\n{\n    'x-amz-request-id': '6B859DD0CE613FAE',\n    'x-amz-id-2': 'EXLMfc9aiXZFzNwLKXpw35iaVvl/DkEA6GtbuxjfmuLN3kLPL/aGoa7NMSwpl3m7ICAtNbjJX4w='\n}\n</code></pre>"},{"location":"s3/configuration-details/#recordconfiguration_id","title":"<code>record.configuration_id</code>","text":"<pre><code>print(record.configuration_id)\n\n# output\n{\n    'x-amz-request-id': '6B859DD0CE613FAE',\n    'x-amz-id-2': 'EXLMfc9aiXZFzNwLKXpw35iaVvl/DkEA6GtbuxjfmuLN3kLPL/aGoa7NMSwpl3m7ICAtNbjJX4w='\n}\n</code></pre>"},{"location":"s3/configuration-details/#recordobject","title":"<code>record.object</code>","text":"<pre><code>print(record.object)\n\n# output\n{\n    'key': 'user-1-prefs.json',\n    'size': 17545,\n    'eTag': 'b79ac2ef68c08fa9ac6013d53038a26c',\n    'sequencer': '005BA40CB5BD42013A'\n}\n</code></pre>"},{"location":"s3/configuration-details/#recordbucket","title":"<code>record.bucket</code>","text":"<pre><code>print(record.bucket)\n\n# output\n{\n    'name': 'user-preferences',\n    'ownerIdentity': {\n        'principalId': 'A32KFL0DQ3MH8X'\n    },\n    'arn': 'arn:aws:s3:::user-preferences'\n}\n</code></pre>"},{"location":"s3/configuration-details/#recordbucket_arn","title":"<code>record.bucket_arn</code>","text":"<pre><code>print(record.bucket_arn)\n\n# output\n'arn:aws:s3:::user-preferences'\n</code></pre>"},{"location":"s3/configuration-details/#recordbucket_owner","title":"<code>record.bucket_owner</code>","text":"<pre><code>print(record.bucket_owner)\n\n# output\n'A32KFL0DQ3MH8X'\n</code></pre>"},{"location":"s3/configuration-details/#recordkey","title":"<code>record.key</code>","text":"<pre><code>print(record.key)\n\n# output\n'user-1-prefs.json'\n</code></pre>"},{"location":"s3/configuration-details/#recordschema_version","title":"<code>record.schema_version</code>","text":"<pre><code>print(record.schema_version)\n\n# output\n'1.0'\n</code></pre>"},{"location":"s3/configuration-details/#recorduser_identity","title":"<code>record.user_identity</code>","text":"<pre><code>print(record.user_identity)\n\n# output\n'AWS: AROAI7Z5ZQEQ3UETKKYGQ: deploy-workers-poc-put-v1-photo'\n</code></pre>"},{"location":"s3/configuration-details/#recordoperation","title":"<code>record.operation</code>","text":"<pre><code>print(record.operation)\n\n# output\n'created'\n</code></pre>"},{"location":"s3/configuration-details/#recordbody","title":"<code>record.body</code>","text":"<pre><code>print(record.body)\n\n# output\n{\n    'possible': 'output'\n}\n</code></pre>"},{"location":"s3/quickstart/","title":"Quickstart","text":""},{"location":"s3/quickstart/#s3-quickstart","title":"S3 Quickstart","text":"<p>Event handler for Amazon S3 Bucket Events.</p>"},{"location":"s3/quickstart/#features","title":"Features","text":"<ul> <li>Automatically convert JSON files to JSON objects</li> <li>Automatically convert CSV files to JSON objects</li> <li>Only run on certain S3 operations, like on when items are created, updated or deleted</li> <li>Able to validate S3 record against a JSON Schema</li> <li>Assign Data Classes to records instead of getting raw S3 JSON objects</li> </ul>"},{"location":"s3/quickstart/#installation","title":"Installation","text":"Shell <pre><code>$ pip install acai_aws\n# pipenv install acai_aws\n# poetry add acai_aws\n</code></pre>"},{"location":"s3/quickstart/#minimal-setup","title":"Minimal Setup","text":"<p>After installation, create a handler file and configure the AWS lambda to use that file as its handler.</p> s3.pyserverless.yml <pre><code>from acai_aws.s3.requirements import requirements\n\n@requirements(\n    get_object=True,\n    data_type='json'\n)\ndef handle(event):\n    for record in event.records:\n        print(record)\n</code></pre> <pre><code>functions:\ns3-handler:\nhandler: service/handlers/s3.handle\nmemorySize: 512\ntimeout: 900\nevents:\n- s3:\nbucket: uploadsBucket\nevent: s3:ObjectCreated:*\n</code></pre>"},{"location":"sns/configuration-details/","title":"Configurations","text":""},{"location":"sns/configuration-details/#sns-event-configurations","title":"SNS Event Configurations","text":"<p>The SNS event will automatically handle many common things done when eventing off an SNS stream. Developers  then have the ability to further extend that functionality with custom middleware. Below is a full list of all the  configurations available and examples of their use.</p> Examples <p>Don't like reading documentation? Then look at  our examples, which can be deployed in 1  command into your AWS account! </p>"},{"location":"sns/configuration-details/#lambda-configuration","title":"Lambda Configuration","text":"serverless.yml <pre><code>functions:\nsns-handler:\nhandler: service/handlers/sns.handle\nmemorySize: 512\ntimeout: 900\nevents:\n- sns:\narn:\nFn::GetAtt: [ SomeTopic, 'Arn' ]\n</code></pre>"},{"location":"sns/configuration-details/#requirements-configuration-options","title":"Requirements Configuration Options","text":"option type required default description <code>before</code> func no None a custom function to be ran before your records are pulled <code>after</code> func no None a custom function to be ran after your records are pulled <code>data_class</code> class no None a custom class that will be passed instead of the records object <code>raise_body_error</code> bool no False will raise exception if body of record does not match schema provided <code>required_body</code> str or dict no None will validate body of record against this schema <code>schema</code> str no None file path pointing to the location of the openapi.yml file <pre><code>from acai_aws.sns.requirements import requirements\n\n# example data class (requires, get_object=True and a data_type)\nclass SomeClass:\n    def __init__(self, record):\n        for k, v in record.body.items():\n            setattr(self, k, v)\n\n# example before function\ndef log_something(records, requirements):\n    if 'something' in requirements:\n        print(records) \n\n# example after function\ndef alert_something(records, result, requirements):\n    if 'something' in result and 'alert' in requirements:\n        print(records)\n\n@requirements(\n    before=log_something,\n    data_class=SomeClass,\n    raise_body_error=True,\n    schema='service/openapi.yml',\n    required_body='v1-sns-body', # or send jsonschema dict; schema kwarg not needed if sending jsonschema dict\n    after=alert_something,\n)\ndef handle(event):\n    for record in event.records:\n        print(record)\n</code></pre>"},{"location":"sns/configuration-details/#sns-record-properties","title":"SNS Record Properties","text":"property type description <code>source</code> str the source of the event <code>source_arn</code> str the source arn of the event <code>region</code> str the region of the event <code>body</code> dict,str the body of file in the s3 bucket <code>attributes</code> dict the attributes dict of the message attributes; easier than use message attributes <code>message_attributes</code> dict the message attributes of the message <code>version</code> str the version sns event <code>subscription_arn</code> str the subscription arn of the sns event <code>signature_version</code> str the signature version of the sns event <code>timestamp</code> str the timestamp of the sns event <code>signature</code> str the signature of the sns event <code>signing_cert_url</code> str the signing cert url of the sns event <code>message_id</code> str the message id of the sns event <code>message</code> str the message of the sns event <code>sns_type</code> str the type of the sns event <code>unsubscribe_url</code> str the unsubscribe_url of the sns event <code>topic_arn</code> str the topic arn of the sns event <code>subject</code> str the subject of the sns event"},{"location":"sns/configuration-details/#recordsource","title":"<code>record.source</code>","text":"<pre><code>print(record.source)\n\n# output\n'aws:sns'\n</code></pre>"},{"location":"sns/configuration-details/#recordsource_arn","title":"<code>record.source_arn</code>","text":"<pre><code>print(record.source_arn)\n\n# output\n'arn:aws:sns:us-east-2:123456789012:my-queue'\n</code></pre>"},{"location":"sns/configuration-details/#recordregion","title":"<code>record.region</code>","text":"<pre><code>print(record.region)\n\n# output\n'us-east-1'\n</code></pre>"},{"location":"sns/configuration-details/#recordbody","title":"<code>record.body</code>","text":"<pre><code>print(record.body)\n\n# output\n{\n    'key': 'value'\n}\n</code></pre>"},{"location":"sns/configuration-details/#recordattributes","title":"<code>record.attributes</code>","text":"<pre><code>print(record.attributes)\n\n# output\n{\n    'SomeString': 'Some String',\n    'SomeBinary': 'Some Binary',\n}\n</code></pre>"},{"location":"sns/configuration-details/#recordmessage_attributes","title":"<code>record.message_attributes</code>","text":"<pre><code>print(record.message_attributes)\n\n# output\n{\n    'SomeString': {\n        'DataType': 'string',\n        'StringValue': 'Some String'\n    },\n    'SomeBinary': {\n        'DataType': 'binary',\n        'BinaryValue': 'Some Binary'\n    }\n}\n</code></pre>"},{"location":"sns/configuration-details/#recordversion","title":"<code>record.version</code>","text":"<pre><code>print(record.version)\n\n# output\n'1.0'\n</code></pre>"},{"location":"sns/configuration-details/#recordsubscription_arn","title":"<code>record.subscription_arn</code>","text":"<pre><code>print(record.subscription_arn)\n\n# output\n'arn:aws:sns:us-east-1:123456789012:sns-lambda:21be56ed-a058-49f5-8c98-aedd2564c486'\n</code></pre>"},{"location":"sns/configuration-details/#recordsignature_version","title":"<code>record.signature_version</code>","text":"<pre><code>print(record.signature_version)\n\n# output\n'1'\n</code></pre>"},{"location":"sns/configuration-details/#recordtimestamp","title":"<code>record.timestamp</code>","text":"<pre><code>print(record.timestamp)\n\n# output\n'2019-01-02T12:45:07.000Z'\n</code></pre>"},{"location":"sns/configuration-details/#recordsignature","title":"<code>record.signature</code>","text":"<pre><code>print(record.signature)\n\n# output\n'tcc6faL2yUC6dgZdmrwh1Y4cGa/ebXEkAi6RibDsvpi+tE/1+82j...65r=='\n</code></pre>"},{"location":"sns/configuration-details/#recordsigning_cert_url","title":"<code>record.signing_cert_url</code>","text":"<pre><code>print(record.signing_cert_url)\n\n# output\n'https://sns.us-east-1.amazonaws.com/SimpleNotificationService-ac565b8b1a6c5d002d285f9598aa1d9b.pem'\n</code></pre>"},{"location":"sns/configuration-details/#recordsigning_cert_url_1","title":"<code>record.signing_cert_url</code>","text":"<pre><code>print(record.signing_cert_url)\n\n# output\n'https://sns.us-east-1.amazonaws.com/SimpleNotificationService-ac565b8b1a6c5d002d285f9598aa1d9b.pem'\n</code></pre>"},{"location":"sns/configuration-details/#recordmessage_id","title":"<code>record.message_id</code>","text":"<pre><code>print(record.message_id)\n\n# output\n'95df01b4-ee98-5cb9-9903-4c221d41eb5e'\n</code></pre>"},{"location":"sns/configuration-details/#recordmessage","title":"<code>record.message</code>","text":"<pre><code>print(record.message)\n\n# output\n{\n    'key': 'value'\n}\n</code></pre>"},{"location":"sns/configuration-details/#recordsns_type","title":"<code>record.sns_type</code>","text":"<pre><code>print(record.sns_type)\n\n# output\n'Notification'\n</code></pre>"},{"location":"sns/configuration-details/#recordunsubscribe_url","title":"<code>record.unsubscribe_url</code>","text":"<pre><code>print(record.unsubscribe_url)\n\n# output\n'https://sns.us-east-1.amazonaws.com/?Action=Unsubscribe&amp;amp;SubscriptionArn=arn:aws:sns:us-east-1:123456789012:test-lambda:21be56ed-a058-49f5-8c98-aedd2564c486'\n</code></pre>"},{"location":"sns/configuration-details/#recordtopic_arn","title":"<code>record.topic_arn</code>","text":"<pre><code>print(record.topic_arn)\n\n# output\n'arn:aws:sns:us-east-1:123456789012:sns-lambda'\n</code></pre>"},{"location":"sns/configuration-details/#recordsubject","title":"<code>record.subject</code>","text":"<pre><code>print(record.subject)\n\n# output\n'TestInvoke'\n</code></pre>"},{"location":"sns/quickstart/","title":"Quickstart","text":""},{"location":"sns/quickstart/#sns-quickstart","title":"SNS Quickstart","text":"<p>Event handler for Amazon SQS Events.</p>"},{"location":"sns/quickstart/#features","title":"Features","text":"<ul> <li>Automatically convert JSON from message body</li> <li>Automatically flatten message attributes</li> <li>Able to message body against a JSON Schema</li> <li>Assign Data Classes to records instead of getting record objects</li> </ul>"},{"location":"sns/quickstart/#installation","title":"Installation","text":"Shell <pre><code>$ pip install acai_aws\n# pipenv install acai_aws\n# poetry add acai_aws\n</code></pre>"},{"location":"sns/quickstart/#minimal-setup","title":"Minimal Setup","text":"<p>After installation, create a handler file and configure the AWS lambda to use that file as its handler.</p> sns.pyserverless.yml <pre><code>from acai_aws.sns.requirements import requirements\n\n@requirements(\n    required_body='v1-sns-event'\n)\ndef handle(event):\n    for record in event.records:\n        print(record)\n</code></pre> <pre><code>functions:\nsns-handler:\nhandler: service/handlers/sns.handle\nmemorySize: 512\ntimeout: 900\nevents:\n- sqs:\narn:\nFn::GetAtt: [ SomeTopic, 'Arn' ]\n</code></pre>"},{"location":"sqs/configuration-details/","title":"Configurations","text":""},{"location":"sqs/configuration-details/#sqs-event-configurations","title":"SQS Event Configurations","text":"<p>The SQS event will automatically handle many common things done when eventing off an SQS stream. Developers  then have the ability to further extend that functionality with custom middleware. Below is a full list of all the  configurations available and examples of their use.</p> Examples <p>Don't like reading documentation? Then look at  our examples, which can be deployed in 1  command into your AWS account! </p>"},{"location":"sqs/configuration-details/#lambda-configuration","title":"Lambda Configuration","text":"serverless.yml <pre><code>functions:\nsqs-handler:\nhandler: service/handlers/sqs.handle\nmemorySize: 512\ntimeout: 900\nevents:\n- sqs:\narn:\nFn::GetAtt: [ SomeQueue, 'Arn' ]\n</code></pre>"},{"location":"sqs/configuration-details/#requirements-configuration-options","title":"Requirements Configuration Options","text":"option type required default description <code>before</code> func no None a custom function to be ran before your records are pulled <code>after</code> func no None a custom function to be ran after your records are pulled <code>data_class</code> class no None a custom class that will be passed instead of the records object <code>raise_body_error</code> bool no False will raise exception if body of record does not match schema provided <code>required_body</code> str or dict no None will validate body of record against this schema <code>schema</code> str no None file path pointing to the location of the openapi.yml file <pre><code>from acai.sqs.requirements import requirements\n\n# example data class (requires, get_object=True and a data_type)\nclass SomeClass:\n    def __init__(self, record):\n        for k, v in record.body.items():\n            setattr(self, k, v)\n\n# example before function\ndef log_something(records, requirements):\n    if 'something' in requirements:\n        print(records) \n\n# example after function\ndef alert_something(records, result, requirements):\n    if 'something' in result and 'alert' in requirements:\n        print(records)\n\n@requirements(\n    before=log_something,\n    data_class=SomeClass,\n    raise_body_error=True,\n    schema='service/openapi.yml',\n    required_body='v1-sqs-body', # or send jsonschema dict; schema kwarg not needed if sending jsonschema dict\n    after=alert_something,\n)\ndef handle(event):\n    for record in event.records:\n        print(record)\n</code></pre>"},{"location":"sqs/configuration-details/#sqs-record-properties","title":"SQS Record Properties","text":"property type description <code>source</code> str the source of the event <code>source_arn</code> str the source arn of the event <code>region</code> str the region of the event <code>body</code> dict,str the body sqs message <code>md5_of_body</code> str the md5 of the body <code>attributes</code> dict the attributes dict of the message attributes; easier than use message attributes <code>message_attributes</code> dict the message attributes of the message"},{"location":"sqs/configuration-details/#recordsource","title":"<code>record.source</code>","text":"<pre><code>print(record.source)\n\n# output\n'aws:sqs'\n</code></pre>"},{"location":"sqs/configuration-details/#recordsource_arn","title":"<code>record.source_arn</code>","text":"<pre><code>print(record.source_arn)\n\n# output\n'arn:aws:sqs:us-east-2:123456789012:my-queue'\n</code></pre>"},{"location":"sqs/configuration-details/#recordregion","title":"<code>record.region</code>","text":"<pre><code>print(record.region)\n\n# output\n'us-east-1'\n</code></pre>"},{"location":"sqs/configuration-details/#recordbody","title":"<code>record.body</code>","text":"<pre><code>print(record.body)\n\n# output\n{\n    'key': 'value'\n}\n</code></pre>"},{"location":"sqs/configuration-details/#recordmd5_of_body","title":"<code>record.md5_of_body</code>","text":"<pre><code>print(record.md5_of_body)\n\n# output\n'e4e68fb7bd0e697a0ae8f1bb342846b3'\n</code></pre>"},{"location":"sqs/configuration-details/#recordattributes","title":"<code>record.attributes</code>","text":"<pre><code>print(record.attributes)\n\n# output\n{\n    'SomeString': 'Some String',\n    'SomeBinary': 'Some Binary',\n}\n</code></pre>"},{"location":"sqs/configuration-details/#recordmessage_attributes","title":"<code>record.message_attributes</code>","text":"<pre><code>print(record.message_attributes)\n\n# output\n{\n    'SomeString': {\n        'DataType': 'string',\n        'StringValue': 'Some String'\n    },\n    'SomeBinary': {\n        'DataType': 'binary',\n        'BinaryValue': 'Some Binary'\n    }\n}\n</code></pre>"},{"location":"sqs/quickstart/","title":"Quickstart","text":""},{"location":"sqs/quickstart/#sqs-quickstart","title":"SQS Quickstart","text":"<p>Event handler for Amazon SQS Events.</p>"},{"location":"sqs/quickstart/#features","title":"Features","text":"<ul> <li>Automatically convert JSON from message body</li> <li>Automatically flatten message attributes</li> <li>Able to message body against a JSON Schema</li> <li>Assign Data Classes to records instead of getting record objects</li> </ul>"},{"location":"sqs/quickstart/#installation","title":"Installation","text":"Shell <pre><code>$ pip install acai\n# pipenv install acai\n# poetry add acai\n</code></pre>"},{"location":"sqs/quickstart/#minimal-setup","title":"Minimal Setup","text":"<p>After installation, create a handler file and configure the AWS lambda to use that file as its handler.</p> sqs.pyserverless.yml <pre><code>from acai_aws.sqs.requirements import requirements\n\n@requirements(\n    required_body='v1-sqs-event'\n)\ndef handle(event):\n    for record in event.records:\n        print(record)\n</code></pre> <pre><code>functions:\nsqs-handler:\nhandler: service/handlers/sqs.handle\nmemorySize: 512\ntimeout: 900\nevents:\n- sqs:\narn:\nFn::GetAtt: [ SomeQueue, 'Arn' ]\n</code></pre>"}]}